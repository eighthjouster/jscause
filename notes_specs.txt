JSFramework: working title.

Make JS work as if it was Perl or PHP:

A site/ folder.

With a hierarchy like the followng:

sites/
sites/mysite/
sites/mysite/site_configuration.json
sites/mysite/site_routes.json
sites/mysite/public/
sites/mysite/public/index.html
sites/mysite/public/index.sjs
sites/mysite/files/
sites/mysite/files/user_list.csv
sites/mysite/json/
sites/mysite/json/database.json
sites/mysite/json/custom_config.json
sites/mysite/scripts/
sites/mysite/scripts/main.sjs

public/, json/, files/, site_routes.json and scripts/ must allow hot reloading.

Each site contains:
    - A site_configuration.json file:  Site name, listening port, domain name, ssl, etc.
    - A site_routes.json (optional):  Will map files to routes, overriding whatever is on public/.
    - A public/ folder, which will contain files that can be requested directly by the browser.
    - Files with an SJS extension (for example, index.sjs) will be executed first, with its output sent to the browser.
    - A files/ folder, which will contain files that can only be accessed by server-side scripts.
    - A json/ folder, with extra configuration files:
    - database.json:  Database connection info.
    - custom_config.json: Application-specific configuration.
    - A scripts/ folder:  With server-side Javascript files.  They can only be accessed via routes, or by importing.

public/, json/, files/, site_routes.json and scripts/ must allow hot reloading.

This is valid:
<js rt.print('WHOA 4!'); /js>

Or this:
<js
      rt.print('WHOA 4!');
/js>

- Anything outside of <js /js> will be printed out as is (regular text or HTML).
<h2><js rt.print('WHOA 4!'); /js></h2>
- To '<js' and '/js>' as literal text, prefix it with a backslash: '\<js' and '\/js>'.
- '<js /js>' are case insensitive.  These are valid: '<JS' and '/JS>'.
- If there are no tags, the whole file is considered Javascript.
- If there are no tags, but there is a <html/> tag at the top of the file, the file is considered HTML.
- If the first thing in a file is an opening tag it can be omitted.  Likewise, the last thing in a file is a closing file, it can be omitted.
- rt.header() sets headers.  You can call them as many times as needed.
- rt.waitFor() must be used when defining callbacks.  For example:
  - Instead of:  setTimeout(() => { rt.print('Hello, world!'); }, 1000);
  - Write it as: setTimeout(rt.waitFor(() => { rt.print('Hello, world!'); }), 1000);
  - If you don't do this, then the response will be sent to the client without waiting.
  - rt.waitFor()'s can be nested.
- rt.queryParams is an object containing the GET query parameters.
