JSCause: A JS framework.  Bringing the good bits back.

This document contains all the bits that need to be added to the official documentation.  Feel free to add what's pending to add to the docs here, and delete what is already in the docs.

Ideally, this document should not exist, and all its contents transferred to github issues.

====
Where to update the version (e.g. v0.9.3) before releasing:
 - Git tags
 - Dist zip files (the folder name may have a suffix, such as -alpha or -beta, or none at all!)
 - Documentation
 - Changelog
 - Readme
 - package.json (and package-json.lock?)
====

website/ and configuration/ must allow hot reloading.

- To output '<js' and '/js>' as literal text, prefix it with a backslash: '\<js' and '\/js>'.
- '<js /js>' are case insensitive.  These are valid: '<JS' and '/JS>'.
- If the first line in a file is an opening tag, it can be omitted.  Likewise, the last line in a file is a closing file, it can be omitted.
  - If when POSTing the content-type header is set to anything other than application/json o form encoded, the payload will be available as rt.postParams.data.  If the user is sure it will be a string, they should do rt.postParams.data.toString() before processing.
  - contentType can be whatever the content-type header is set to, except for:
    - Form content: it will be formData.
    - Form content with file upload: it will be formDataWithUpload.
    - JSON: it will be jsonData.
- jscause.conf is almost a valid JSON object.  Almost, because it allows // comments, for documentation.
- Duplicate first-level keys in jscause.conf will cause an error.  Duplicate keys in values will be ignored, with the last value listed being the one used (just like it's done in Javascript).
- First-level keys in jscause.conf are case-insensitive.
- jscause.conf:  Global enclosing curly brackets are optional.
- Comments in jscause.conf: // are allowed.  Yes, we know comments are not valid json.  But they are allowed for documentation.
- All attributes declared in jscause.conf must be valid (known), or else the server will NOT start.  If any attribute is omitted, defaults will apply.
- No two sites can have the same name.
- No two sites can have the same rootDirectoryName/port combination (that is, they can have the same rootDirectoryName if they have different ports.)
- No two sites can have the same hostname/port combination (that is, they can have the same hostname if they have different ports.)
- A warning will be issued if two sites share the same upload directory and don't have the same host name.

- Tip: Common error: If you receive an unexpected token error referring to a part of the file that was supposed to be treated as HTML, check if the closing /js> previous to the line with the error was put in a line with a comment in it.  Example:  // This whole line is a comment /js>
- Other file functions:
  - rt.deleteFile(path).
  - rt.fileExists(path).  rtOnSuccess is called if file exists.  rtOnError otherwise.  It is advised that the error be examined.  Typically, err.code should be 'ENOENT'.
- Notice that if there is an error inside .rtOnSuccess(), the code will not jump to .rtOnError(), as these only deal with the original corresponding operation.  JSCause will emit a typical error (you can trap it with try() catch{} though.)
- Filesystem - URL mapping:
  - Folders (directories) are allowed.
  - Folders with names with extensions are allowed.
  - If a folder is specified with no file/resource name (e.g. /myFolder/), JSCause will assume /myFolder/index.jscp.  If /myFolder/index.jscp doesn't exist, it will throw a 404 error.
  - If there is a file with the same name as a folder + the jscp extension (for example, file name hello.jscp and folder name hello), the file takes precedence for the /filename url (example: /hello.)  To specify the folder, add a '/', as in /hello/, or use /hello/index, or /hello/index.jscp
  - Files with .jscp extensions can be referred to without said extension.  For example, hello.jscp can be referred to both as /hello and /hello.jscp (but not /hello/ or /hello.jscp/, which will throw a 404 error.)  The file /myFolder/hello.jscp can be referred to as /myFolder/hello
  - '.' and '..' are not allowed.
  - Files and folders starting with '.' (e.g. '.myFile.jscp') will be considered hidden, and thus, ignored by the JSCause server.  It's as if they're not there, and thus they won't be served.
  - A file literally named '.jscp', while technically hidden, will still be parsed during server init.  So it must be a valid JSCP file.
- The per-site httpPoweredByHeader config value can show or hide the 'X-Powered-By: jscause' HTTP response header.  Assign 'include' to show, 'exclude' to hide.

File and directory limits:
==========================

- A maximum of 2048 subdirectories or files are allowed in a single directory; including those resolved by following symbolic links.
- A maximum of 4096 directories/subdirectories are allowed overall in a single application.

File names:
===========

- File and directory names are assumed UTF8-encoded.  If the file system allows spaces in names, JSCause will respect this.
- If the site config directive "jscpExtensionRequired" has the following value:
  - "never": Then routes associated to jscp files must NEVER be specified with the jscp extension (e.g.: http://www.example.com/executable instead of http://www.example.com/executable.jscp).  Otherwise the server will throw a 404 error.  Notice that /index (with no extension), be it the root directory or any other directory, will also give a 404 error here.  Notice that directory names ending in '.jscp' will throw a 404 if addressed on their own (e.g. http://www.example.com/directory.jscp)
  - "always": Then routes associated to jscp files must ALWAYS be specified with the jscp extension (e.g.: http://www.example.com/executable.jscp instead of http://www.example.com/executable).  Otherwise the server will throw a 404 error.  Naturally, /index (with no extension), be it the root directory or any other directory, will also give a 404 error here.
  - "optional": Then routes associated to jscp files may omit the file extension (e.g.: both http://www.example.com/executable.jscp and http://www.example.com/executable refer to the same route).  Naturally, /index (with no extension), be it the root directory or any other directory, is also allowed.

Mime types:
===========

JSCause can handle a set of mime types according to the url resource extension (e.g. 'image.png') [TODO: List them here.  See: MIME_TYPES].
An unrecognized mime type will be treated as 'application/octet-stream'.  In these cases, the browser may attempt to download instead of display the resource.
Add extra mime types to the list of recognized ones (or replace their values), with the "mimeTypes" configuration directive:
  "mimeTypes": {
    "include": {
      "png": "image/png",
      "some_other_type": "some_other_value"
    }
  }
If you specify an empty string as a value, it will be assumed octect-stream (a warning will be shown in the server console during startup.)

If you want a mime type to be handled as 'application/octet-stream' (e.g. for downloading), put it in the 'exclude' list (note that 'exclude' is an array, as opposed to 'include', which is an associative array):
  "mimeTypes": {
    "exclude": [
      "jpg",
      "some_other_type"
    ]
  }

Include and exclude can be used at the same time:
  "mimeTypes": {
    "include": {
      "png": "image/png",
      "some_other_type": "some_other_value"
    },
    "exclude": [
      "jpg",
      "some_other_type"
    ]
  }

If the same mime type is added to both lists, the lattermost list will prevail (e.g. if 'exclude' is defined after 'include', then the mime-type will be excluded.)
JSCause will not guarantee which value is assigned to a mime type listed more than once in the 'include' section.

Static files:
=============
- Files up to MAX_CACHEABLE_FILE_SIZE_BYTES (512 * 1024 = 512KBytes) will be cached.  Files larger than that will be read from the file system and served upon request.
- Up to MAX_CACHED_FILES_PER_SITE (256) files will be cached in memory.  The rest will be read from the file system and served upon request.
- While JSCause can handle static files, it is advised to serve them by other more efficient means, e.g. with nginx or a CDN.
- Advise the reader to put all the .js files that will be served to the client in a single directory, to keep things tight and secure.  JS files that should be executed on the server should reside outside of the /website directory.

In regards of 'this':
=====================
'this' is an empty object ({}) during the execution of the script.  Its value will not carry over the next time the script is called with a new request.
 - If you use setInterval(), you will see that the 'this' can be modified and its modified content will be available next time the callback is run.  This is normal behavior.  That setInterval() is occurring inside the execution environment of the request that started it.
 - When a function is defined inside a script (or imported with rt.module()), the 'this' inside it will be the system's.  This behavior could change in a future version; perhaps not completely, but there might be some optional configuration directive to make it an empty object.
 
Testing related:
================

If you use methods that require waiting to complete via a callback, use this.waitForDoneSignal() as the callback.  If you want to provide a custom callback, pass it as a parameter of waitForDoneSignal().  For example:
      testServer.close(this.waitForDoneSignal(() =>
      {
        console.log('This is called when close() completes.');
      }));

For promises that assume that the test will end when a .then() or a .catch() is invoked, set this.waitForContinueTestingCall to true in the promise declaration, and call this.continueTesting() at the very end of the then() and catch() blocks.  Remember:  This will end the current test, and move on to the next one, no waiting at all.

waitForDoneSignal() can only be used once in a single phase function.  Trying to call it more than once will throw a critical error and abort testing.
 - A workaround would be using it at last nested callback, or put all the callbacks inside a Promise.all(), or similar approach.
 - You could also do something like:
   const triggerDoneSignal = this.waitForDoneSignal();
   then call triggerDoneSignal() anywhere you want.
     - This will immediately move on to the next test, though (no waiting for pending callbacks).  So be judicious.  For example:  if the test battery is at a later phase, and an old triggerDoneSignal() from a previous phase is triggered, well, it will be as if it was invoked in the current test and the battery will unexpectedly move on to the next phase.
     Therefore, this trick is recommended to be used on tests involving onTestBeforeStart()/onReadyForRequests()/onTestEnd() only.

Some on() calls could be called more than once if more than one server is started during the test.  Using onServerStartedOrError() and this.numberOfServersInvokedSofar to keep track of server invocations can help handle scenarios, well, post-server invocations.

 - terminateApplication() can have an onComplete callback.
   - As follows:
     - this.terminateApplication({ onComplete: myCallBackHere });
   - The callback gets called when the application has terminated, with no file or connection closing activity pending; that is, no logging or request/response/listening activity pending.

When testing server requests:
 - Use onReadyForRequests() to start making requests to the server.
   - onReadyForRequests() is used to test requests to the server.  Invoke http.request() and/or https.request() here.
   - You MUST set this.isRequestsTest to true inside onTestBeforeStart().
   - When this call is used, jscTest will automatically do this:
      - this.doneRequestsTesting() will be available for invocation.  It *MUST* be invoked at some point during the phase, or else we will never advance to the next phase and the test battery will remain stuck waiting indefinitely.
        - Recommended places: res.on('end', ...) and req.on('error', ...).
        - Note: this.doneRequestsTesting has the result of invoking this.waitForDoneSignal().  So, it's sort of syntactic sugar.
  - It is highly recommended that no other phases other than onTestBeforeStart() and onTestEnd() are used when onReadyForRequests() is present due to the nature of doneRequestsTesting() (see the documentation on waitForDoneSignal(), especifically the triggerDoneSignal() limitation workaround trick.)
 - When doneRequestsTesting() is called, then onAllRequestsEnded() is invoked.
   - So, onAllRequestsEnded is invoked when no more requests and responses are pending from the server.
 - Use onAllRequestsEnded() to terminate the application as follows:
   - this.terminateApplication({ onComplete: this.waitForDoneSignal() });
     - waitForDoneSignal() is crucial here, otherwise the server will still be open when the next test starts.  This could lead to port conflicts and similar errors that could cause later tests to fail.
 - Here is a way to reduce code boilerplate:
   - Use the makeTestEndBoilerplate() decorator when creating a test:
   const mytestName = Object.assign(makeFromBaseTest('test description'),
    makeTestEndBoilerplate.call(this),
    {
      // only: true,
      onTestBeforeStart()
      {
      },
      //etc
    });
   - It will add onAllRequestsEnded() (with the correct terminateApplication() call), onBeforeTestEnd() (which checks whether the server terminated) and onTestEnd() (which deletes the test's index.jscp.)
   - Then, use the processResponse() utility function, which allows to define the post request, then get the response from said request once it completes it: statusCode, dataReceived, consoleLogOutput.
 - You can have access to whatever console.log output was generated by the test app (index.jscp) during a test.  To do that, call initConsoleLogCapture() in onTestBeforeStart(), endConsoleLogCapture() and then you can do this once we've received all the response:
   const output = testUtils.endConsoleLogCapture();
   - If you use processResponse(), you this call will happen automatically and available as a consoleLogOutput variable.
   - For easy output log comparison, areFlatArraysEqual() is available.
   - NOTE: if you use initConsoleLogCapture(), console.log() will be redefined for capture.  If you need to debug your test while building, use console.info() as an alternative to console.log() so that you can print debug messages in the terminal.


Very important: Every use of jscThen() requires using jscCatch(), even if the latter is empty.  This is because each one counts as one pending callback. And since only one will actually be executed, the other one needs to be 'discarded', so the system must assume that _two_ pending callbacks were addressed.  Therefore, if you omit a jscCatch(), the pending callbacks count will stop being accurate, potentially making the test to end prematuraly and without cleaning up, which can adversely affect the next tests in line.

Known issues:
=============

- Does not support resuming of interrupted large file downloads.  For a future version.

- For now, every file is assumed UTF-8.

- When invoking a function defined inside a JSCP script (or when using rt.module()), 'this' inside the module will be the system's.  In a future version, a configurable directive may force it to an empty object.  But we'll see.

- Firefox 61.0.2 on MacOS High Sierra has issues when reloading a page that renders after an upload.  If a user uploads a file, then re-loads the page (triggering a browser re-upload confirmation page), Firefox will reset the connection.  Newer versions do not exhibit this behavior.  Chrome does not exhibit this behavior either.

