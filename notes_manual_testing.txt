Pending:
========

Please continue with the actual test building:

Update the docs to indicate that rt.readFile() has a second parameter, encoding, which defaults to undefined, implying raw bytes.  To read text files encoded in utf-8, use 'utf-8'.

 +- File uploads:
  - Up next:
    - Actual binary data.
    - Binary data with text fields.
    - Large files.
      - Limit exceeds.
        - Check that temp files are erased.
        - The one provided by the application.
        - And the one provided by formidable, if applies.
    - Empty files?
    - Large number of files.
      - Limit exceeds.
        - Check that temp files are erased.
        - The one provided by the application.
        - And the one provided by formidable, if applies.
    - Large field values (not files, fields).
      - Limit exceeds.
    - Large number of fields (not files, fields).
      - Limit exceeds.
    - File and fields.
    - FileS and fields.
  - Forbidden uploads.
    - Check that temp files are erased.
     - The one provided by the application.
     - And the one provided by formidable, if applies.
  - Slooow upload (do we have a timeout option?)
    - Or when maxlength is wrong (never ending upload; there should be a timeout, right?)
      - Check that temp files are erased.
      - The one provided by the application.
      - And the one provided by formidable, if applies.
  - Upload interrupted by client.
    - Check that temp files are erased.
     - The one provided by the application.
     - And the one provided by formidable, if applies.
 - Two sites, two separate temp upload directories, right?

Do we have access to the requester's user agent? User-Agent header entry?

AT THIS POINT: BACK UP.

 - At this point, release the alpha.

Then:
_Manually test_ (for real) the rest (uploads, serving error files, etc.)
 - Maybe you can document your steps, for reference when implementing more tests in the future.
   - And then check that entries are already documented elsewhere in the document, and delete duplicates.

 - Handling PUT/DELETE requests (which I think aren't supported - yet [ever?])
   - They must return error 405.
 - Stalling the page with a setTimeout.
 - Callbacks and rt.waitFor(), rt.Then(), rt.Catch() (or whatever their right syntax are.)
   - Nesting.
 - rt.* methods.
 - Other file names.
   - Other extensions.
   - No extensions.
   - Configuration: No using of extensions.
   - Default index.jscp
 - Static files.
 - Static files requested with POST.
 - Headers.

Then, refer to notes_testing.txt
