Pending:
========

Please continue with the actual test building:

 +- File uploads:
  *- Simple test: Just one text field.
  *- Simple test: Two text fields.
  *- Simple test: Harcoded "upload" data, just text.
  *- Check that temp files are erased.
    *- The one provided by the application.
    *- And the one provided by formidable, if applies.
  +- Check that two files with the same name (not file name, but same field name) is handled gracefully.
    - Right now, doDeleteFile barfs, and the test don't even complete.
      - First step:  Make the steps complete (and not passing, of course.)
      - Second step: Add a warning or something.
      - Third step: Handle this gracefully.
        - Extend this to functions in the same league as doDeleteFile?
  - What else?  Actual binary data?  Large files? File and fields?  FileS and fields?
  - Forbidden uploads.
    - Check that temp files are erased.
     - The one provided by the application.
     - And the one provided by formidable, if applies.
  - Slooow upload (do we have a timeout option?)
    - Or when maxlength is wrong (never ending upload; there should be a timeout, right?)
  - Limit exceeds.
  - Upload interrupted by client.
    - Check that temp files are erased.
     - The one provided by the application.
     - And the one provided by formidable, if applies.
 - Two sites, two separate temp upload directories, right?

Do we have access to the requester's user agent? User-Agent header entry?

AT THIS POINT: BACK UP.

 - At this point, release the alpha.

Then:
_Manually test_ (for real) the rest (uploads, serving error files, etc.)
 - Maybe you can document your steps, for reference when implementing more tests in the future.
   - And then check that entries are already documented elsewhere in the document, and delete duplicates.

 - Handling PUT/DELETE requests (which I think aren't supported - yet [ever?])
   - They must return error 405.
 - Stalling the page with a setTimeout.
 - Callbacks and rt.waitFor(), rt.Then(), rt.Catch() (or whatever their right syntax are.)
   - Nesting.
 - rt.* methods.
 - Other file names.
   - Other extensions.
   - No extensions.
   - Configuration: No using of extensions.
   - Default index.jscp
 - Static files.
 - Static files requested with POST.
 - Headers.

Then, refer to notes_testing.txt
