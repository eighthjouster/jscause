Pending:
========

Please continue with the actual test building:

Ok, almost there:
 - Temporarily, the current test triggers the timeout.  But that test should be of unrestricted upload time.
  - Then, add another test with the upload time restriction.
    - Make the request fail (look for the "YOOO"), which would make the test pass.

We have to implement a timeout for uploads (and possibily, downloads.)
 *- requestTickTockId
 - responseTickTockId? (implement in the same way as requestTickTockId.)

Test the new functionality.
 - Config keys, just like you tested 'sites' or 'logging'.

Perhaps the following messages:
ERROR: Form upload related error.
Error: Request aborted
shouldn't be logged, since they're user initiated.
 - Or at least it shouldn't throw an error 500; it's not the server's fault that the client closed early.
  (How to reproduce:  upload something, hit back button while uploading is in progress.)

 +- File uploads:
  +- Slooow upload (do we have a timeout option?)
    - Or when maxlength is wrong (never ending upload; there should be a timeout, right?)
      - Check that temp files are erased.
      - The one provided by the application.
      - And the one provided by formidable, if applies.
  - Upload interrupted by client.
    - Check that temp files are erased.
     - The one provided by the application.
     - And the one provided by formidable, if applies.
  - That was for forms.  What about other formats? JSON, raw?
  - Same as above, but with downloads:
    - Forms, JSON, raw.
    - Uploads, downloads.
 - Two sites, two separate temp upload directories, right?

Do we have access to the requester's user agent? User-Agent header entry?

AT THIS POINT: BACK UP.

 - At this point, release the alpha.

Then:
_Manually test_ (for real) the rest (uploads, serving error files, etc.)
 - Maybe you can document your steps, for reference when implementing more tests in the future.
   - And then check that entries are already documented elsewhere in the document, and delete duplicates.

 - Handling PUT/DELETE requests (which I think aren't supported - yet [ever?])
   - They must return error 405.
 - Stalling the page with a setTimeout.
 - Callbacks and rt.waitFor(), rt.Then(), rt.Catch() (or whatever their right syntax are.)
   - Nesting.
 - rt.* methods.
 - Other file names.
   - Other extensions.
   - No extensions.
   - Configuration: No using of extensions.
   - Default index.jscp
 - Static files.
 - Static files requested with POST.
 - Headers.

Then, refer to notes_testing.txt
