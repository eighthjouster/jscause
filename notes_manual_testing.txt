Pending:
========

Ok, new bug.
Scenario:
 - When replacing:
    this.terminateApplication({ onComplete: this.waitForDoneSignal() });
  with:
    this.terminateApplication();
  the application moves on to the next test, and the next test fails because the port is already in use.
What should happen:
  - The error is displayed, the test fails and we move on to the next test.
What happens instead:
  - The failing tests "freezes" the application.  Eventually, it will throw a "Reached the amount of log termination retries due to pending callbacks" error, and even then the test won't move on.
    - Ultimately, we get the "onReadyForRequests: this.doneRequestsTesting() invoked!  Moving on." message, but nothing seems to be happening.

Steps:
 - Fix:  See if we can make it move on at that late stage.
 - Then fix the "reached" issue: If the problem persists after the previous fix (which it should, by the way).

When this is all done, remove test_contents_002_TEST and restore this.terminateApplication({ onComplete: this.waitForDoneSignal() });
 - And check that all tests pass again.

===

Document onAllRequestsEnded().
 - And the fact that terminateApplication() can have an onComplete callback.

- Put onReadyForRequests() in the example and in the battery utils (look for: // TO-DO: EXPLAIN HERE.)
  - Also onAllRequestsEnded().

Document:
For the dev docs:
IMPORTANT: Every use of jscThen() requires using jscCatch(), even if the latter is empty!!
 - This is because they both decrease the pending callback counts by two (since only one will actually be executed; so the other one needs to be 'discarded'.)

 - I think it's better if we start incorporating these in the testing suite.
   - Starting with step 1 below.
     - Ok.  Laid out a lot of ground work.  Please proceed with test building.

At this point:  BACKUP!!!!

 - I'm documenting so we can one day automate it:
*1. One single site, one single, empty index.jscp file.
  Expected: Output: Blank page.  0 bytes.

*2. index.jscp just with one line:
console.log(1);
  Expected: Server console prints 1 with each request.

*3. index.jscp with just one line:
rt.print(1);
  Expected: Page showing '1'.

*4. index.jscp with just one line:
p
  Expected: Error 500.

*5. index.jscp with just one line:
/js>p
  Expected: Page showing 'p'.

*6. index.jscp:
console.log('\<js');
console.log('\/js>');
rt.print('\<js');
rt.print('\/js>');
  Expected:
    - Page showing '<js/js>'.
    - Console output showing:
<js
/js>

*7. index.jscp:
<js rt.print('1'); /js><js rt.print('2'); /js>
<js rt.print('3'); /js>
<js rt.print('4'); /js>
<js rt.print('5');
/js>
<js
rt.print('6'); /js>
<js
rt.print('7');
/js>

<js
rt.print('8');/js><js

rt.print('9');

/js>
abc<js rt.print('d'); /js>

efg

<js rt.print('h'); /js>
<js rt.print('i');


/js><js


rt.print('j');


/js>
<js               rt.print('k');rt.print('l');                   /js>
<JS rt.print('m'); /JS>
  Expected:
    - Page showing '12 3 4 5 6 7 89 abcd efg h ij kl m '
    - Page source showing:
12 
 3 
 4 
 5 
 6 
 7 
 89 
 abcd 
 efg 
 h 
 ij 
 kl 
 m 
  
*8. index.jscp:
<html/>Hello

  Expected:
    - Page showing 'Hello'.

*9. index.jscp:
<html/>
Hello

  Expected:
    - Page showing 'Hello'.

*10. index.jscp:
<html/>Hello
<js console.log(1);

  Expected:
    - Page showing 'Hello'.
    - Console output showing:
1

10. index.jscp:
<html/>Hello
<js console.log(1);

  Expected:
    - Page showing 'Hello'.
    - Console output showing:
1


AT THIS POINT: BACK UP.

Before continuing:
 - Run all tests.  All good?

Pending manual testing:
 - GET parameters.
 - POST requests.
   - POST parameters.
     - As forms.
     - As JSON.
     - As some other format (it should throw error 500, I think?)
 - Uploads:
  - Two sites, two separate temp upload directories, right?
 - At this point, release the alpha.

 - Handling PUT/DELETE requests (which I think aren't supported.)
 - Stalling the page with a setTimeout.
 - Callbacks and rt.waitFor(), rt.Then(), rt.Catch() (or whatever their right syntax are.)
   - Nesting.
 - rt.* methods.
 - Other file names.
   - Other extensions.
   - No extensions.
   - Configuration: No using of extensions.
   - Default index.jscp
 - Static files.
 - Static files requested with POST.

At this point, _manually test_ the rest (uploads, serving error files, etc.)
 - Maybe you can document your steps, for reference when implementing more tests in the future.
   - And then check that entries are already documented elsewhere in the document, and delete duplicates.

Then, refer to notes_testing.txt
