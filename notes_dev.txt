The framework should do this:
 - Enumerate the folders in sites/
   - Each folder will represent a site.
   - Each site contains:
     - A site_configuration.json file:  Site name, listening port, domain name, ssl, etc.
     - A site_routes.json (optional):  Will map files to routes, overriding whatever is on public/.
     - A public/ folder, which will contain files that can be requested directly by the browser.
       - Files with an SJS extension (for example, index.sjs) will be executed first, with its output sent to the browser.
     - A files/ folder, which will contain files that can only be accessed by server-side scripts.
     - A json/ folder, with extra configuration files:
       - database.json:  Database connection info.
       - custom_config.json: Application-specific configuration.
     - A scripts/ folder:  With server-side Javascript files.  They can only be accessed via routes, or by importing.

Good luck, friend.

Pending:

- Implement:
  public/, json/, files/, site_routes.json and scripts/ must allow hot reloading.

How to hide the nodeJS way to do stuff and simplify as much as possible?

A way to do the "server pre-render" stuff.
