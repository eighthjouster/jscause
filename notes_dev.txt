Useful:
git bundle create jscause-.bundle devel
=====

Continue with dealing with file uploads.
 - Pass it on to the user app.
   - Still dealing with:
     +- Delete files after uploading if the user does not move them.
       +- Test or implement the user-end of things:
         +- Move file.
         - Open/read file.
     - Temp upload directories (behind the scenes).
       - The app should optionally specify the upload directory.
     - User-designated upload directory.
 - Think of security - e.g., file size.

Can we destructure a bit? I feel like we have ctx.this and ctx.that scattered around.
 - And runTime, and resObject, maybe.

Continue with analyzing postType.

Docs:  SECURITY:  Put in the docs that the filename should be sanitized before used to write to the file system (potential for attacks!).
 - Offer to sanitize for you (like, safeFileName, or perhaps safeFileName should be just fileName, then you provide unsafeFileName).

Uploads?
 - We'll use formidable.
   - Can we extend this to the way we treat POST requests at the moment?

Use cases:
 - Regular forms (no uploads).
 - Form uploads.
 - JSON.
   - And security, esp. file size.
 - Other?

Implement a safe print function (escaped.)
 - I thought we had this already?

Check that uploading json works.
 - Maybe you'll need to implement a toJson function?

=====

 - Multiple files at once?
 - Security?
   - Consider this:
request.on('data', function (data) {
            body += data;

            // Too much POST data, kill the connection!
            // 1e6 === 1 * Math.pow(10, 6) === 1 * 1000000 ~~~ 1MB
            if (body.length > 1e6)
                request.connection.destroy();
        });
Can you actually send something (res.end()) even if we haven't gotten an 'end' event?  So that you can let the visitor know.
Save to temp file that you will delete after the request ends.
 - Can we use toString() on a chunk?

Cookies?
 - Read/write?

Redirects?

Send JSON?

Other files? (images, css).
 - Static files?

At this point, start abstracting away the engine.

Server Id? (Multi-host).

Server-side rendering?

Specify port number.
Route to site.

Hard-coded values should go in a global file.

Make two versions:  Standalone and NPM-installable.

Version 0.7 here!

Order by priority:

Access to full url.

Set response status code?

Delete header entries?

Clear all header entries?

rt.waitFor():
 - There should be a way to define timeouts, to indicate when the callbacks are taking too long.
   - There should be a default somewhere, maybe 0 for "always wait."
   - If it times out, either throw an error, or run a user's function.

Reload on file change?

Exposure of res and req, for advanced users.

Option to crash the server on fatal error?
 - Crash it on immediate compile error.
 - Reload otherwise?

ESLint.

Compile everything? (not just wait for a runtime error to find out that a module has syntax errors.)
 - Don't waste too much time on this.  You can defer it to a future version.

jssp syntax coloring? linting?

Remove __RP comments.

====

The framework should do this:
 - Enumerate the folders in sites/
   - Each folder will represent a site.

- Implement:
  public/, json/, files/, site_routes.json and scripts/ must allow hot reloading.

Implement: GET and POST.
 - Static pages.
Implement: Submit form data.
 - Ajax.
Implement: Talk to a databse.
Implement:
 - https
 - redirections
 - modules/plugins
   - redistributable packages
 - HTTP authentication?
 - How to avoid that the server dies on error?
   - Or at least it should restart itself.
     - Avoid endless loops?

How to hide the nodeJS way to do stuff and simplify as much as possible?

A way to do the "server pre-render" stuff.

Create a test to ensure all the opening/closing/<html/> tag rules according to the specs.

Security.
 - How to avoid, or at least warn or give control to the site, of DDOS by uploading large files or having too many requests?

Docs?
