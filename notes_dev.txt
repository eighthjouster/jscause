Useful:
git bundle create jscause-.bundle devel
=====

Hm.  You should isolate output queues and other request-related data.  Otherwise, every request will access the same thing.

Can you nest waitFor() callbacks?

Set character encoding, so Firefox won't complain that there is no character encoding.

Redirects?

Cookies?

Send JSON?

Other files? (images, css).
 - Static files?

Read GET parameters?

Read POST parameters?

Read both GET and POST parameters on the same request?

Uploads?
 - Security?

At this point, start abstracting away the engine.

Server Id? (Multi-host).

Server-side rendering?

Specify port number.
Route to site.

Hard-coded values should go in a global file.

Version 0.7 here!

Order by priority:

Set response status code?

Delete header entries?

Clear all header entries?

rt.waitFor():
 - There should be a way to define timeouts, to indicate when the callbacks are taking too long.
   - There should be a default somewhere, maybe 0 for "always wait."
   - If it times out, either throw an error, or run a user's function.

Reload on file change?

Exposure of res and req, for advanced users.

Option to crash the server on fatal error?
 - Crash it on immediate compile error.
 - Reload otherwise?

ESLint.

Compile everything? (not just wait for a runtime error to find out that a module has syntax errors.)
 - Don't waste too much time on this.  You can defer it to a future version.

====

The framework should do this:
 - Enumerate the folders in sites/
   - Each folder will represent a site.

- Implement:
  public/, json/, files/, site_routes.json and scripts/ must allow hot reloading.

Implement: GET and POST.
 - Static pages.
Implement: Submit form data.
 - Ajax.
Implement: Talk to a databse.
Implement:
 - https
 - redirections
 - modules/plugins
   - redistributable packages
 - HTTP authentication?
 - How to avoid that the server dies on error?
   - Or at least it should restart itself.
     - Avoid endless loops?

How to hide the nodeJS way to do stuff and simplify as much as possible?

A way to do the "server pre-render" stuff.

Create a test to ensure all the opening/closing/<html/> tag rules according to the specs.

Security.
 - How to avoid, or at least warn or give control to the site, of DDOS by uploading large files or having too many requests?

Docs?
