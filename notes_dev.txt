Useful:
git bundle create jscause-.bundle devel
=====

Implement the new jscause.conf:
 - Move port out of site_configuration.json

No more site_configuration.json path hardcoding at this point.

Re-test file uploads.  Especifically, file deletion after upload.

Consider using console.warn() and console.error()

Option to use general upload directory and per-site upload directory.

A default config file stowed away, and a app-specific config file for overrides.

No hardcoding?

Cookies?
 - Read/write?

Redirects?

Other files? (images, css, js).
 - Static files?

Are we vulnerable to this?
https://hackerone.com/reports/310439

At this point, start abstracting away the engine.
 - Make it one file using gulp or something, for prod.

Server Id? (Multi-host).

Server-side rendering?

Server logging?

Route to site.

Databases.
 - Basic.

Exposure of res and req, for advanced users.
 - But only if a config value allows it.

Log stdout and stderr to a configurable file.
 - Don't forget to check for directory existence and writeability.
   - There should be a default one.

Hard-coded values should go in a global file.

What is 'this' in our environment context?  Find out, document if necessary.

Syntax highlighters for Atom, VS Code, Vim, Sublime, Notepad++, TextWrangler.

Make two versions:  Standalone and NPM-installable.

Version 0.7b here!
 - Upload to https://github.com/eighthjouster/jscause
 - Thanks to:
   - Formidable.
   - https://github.com/parshap/node-sanitize-filename

 - Create a couple of sites with it.
 - Announce.
 
==========================

Order by priority:

Databases, advanced features.

Uploading files:  When an upload form is submitted with no files specified, the framework still processes such files.  That is, a temp file is created, with size 0, I'm guessing.  And no filenames.
  - Any way to avoid the creation of an unnecessary file?

Plugins.  Something as easy as dropping as a folder in a /plugins folder.

Better handling of max file size exceeded and uploads forbidden.

If the max file size is reached, the partial uploaded file remains in the system's temp directory.  Deal with this (I tried, I really tried, but just gave up after some time.)

Custom HTTP error pages - 404, 500, 403, etc.

Access to full url.

Set response status code?

Delete header entries?

Clear all header entries?

rt.waitFor():
 - There should be a way to define timeouts, to indicate when the callbacks are taking too long.
   - There should be a default somewhere, maybe 0 for "always wait."
   - If it times out, either throw an error, or run a user's function.

Reload on file change?

Option to crash the server on fatal error?
 - Crash it on immediate compile error.
 - Reload otherwise?

ESLint.

Compile everything? (not just wait for a runtime error to find out that a module has syntax errors.)
 - Don't waste too much time on this.  You can defer it to a future version.

jssp syntax coloring? linting?

Remove __RP comments.

====

The framework should do this:
 - Enumerate the folders in sites/
   - Each folder will represent a site.

- Implement:
  public/, json/, files/, site_routes.json and scripts/ must allow hot reloading.

Implement: GET and POST.
 - Static pages.
Implement: Submit form data.
 - Ajax.
Implement: Talk to a databse.
Implement:
 - https
 - redirections
 - modules/plugins
   - redistributable packages
 - HTTP authentication?
 - How to avoid that the server dies on error?
   - Or at least it should restart itself.
     - Avoid endless loops?

How to hide the nodeJS way to do stuff and simplify as much as possible?

A way to do the "server pre-render" stuff.

Create a test to ensure all the opening/closing/<html/> tag rules according to the specs.

Security.
 - How to avoid, or at least warn or give control to the site, of DDOS by uploading large files or having too many requests?

Docs?

===

Use cases:
 - Regular forms (no uploads).
 - Form uploads.
 - JSON.
   - And security, esp. file size.
 - Databases.
 - Cookies.
 - Redirects.
 - Multi-sites.
 - Server-side rendering (if not too complex.)
 - Other?
