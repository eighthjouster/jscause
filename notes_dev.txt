This document details all the work pending to do on JSCause.

Ideally, this document should not exist, and all its content should be transferred elsewhere, e.g. github tickets and Roadmap.md.

=====
Useful:
git bundle create jscause-.bundle devel
=====

Simulate when a connection fails:
  - The server won't start.  It SHOULD START, but emit a warning.
    - But keep the current behavior under a temporary flag for now.
    - Then, index.jscp should deal with it.

Deal with this next:
  - if (dbConn) dbConn.release(); //release to pool
    - I mean, that should only happen when the server / site shuts down (with or without errors.)

 - Migrate the connection and disconnection to jscause.js.
   - Still hard-coded.  It's okay.
 
 - Make the connection values part of a site config.
   - That's right. No global configs.

 - Convert the code to rt functions.

 - What happens if the database gets disconnected? Retry?
   - Should retries be a configuration value?

 - Should there be a config value to instruct the server (or site) to not to continue starting if the database connection fails?
   - Right now (if we implemented this already), the application emits a warning and moves on.  With the config value, the site wouldn't start.
     - I think we have a temporary flag to decide for warning or error at the moment.

 - Isolate the hardcoded stuff.

 - Convert the hardcoded stuff to config values.

 - Disconnect from database if application gets terminated (or if it exists due to an error.)

 - Better names for database stuff.  mariaDbPool?  It should be databasePool or something.

 - The app should not start if the connection is refused.
   - Unless there is no connection defined.

 - Create some config tests, if not all.
   - Document what needs to be tested.
     - For example:
       - Two sites, two connections. Test that operations in one database does not affect the other database.
       - Connection retries?
 - Create some database rt tests, if not all.
   - Document what needs to be tested.

 - Document.
  - Also, tide up what you added in notes_specs.txt.

Put in the docs the native promise trick:
const appContinue = rt.waitFor();
something
  .then(() => {
    /* some code */
    appContinue();
  })
  .catch(() => {
    /* some code */
    appContinue();
  });
 - Put it alongside the waitFor() trick for setInterval().

"Server not started.  No sites are running."
 - Shouldn't the server process exit to the console if this happens? At the time of writing this, the server is just up, but not serving anything.
   - If you change this, re-run the tests.

How to guarantee that if jscvendor is not available, then we can still use the external node_modules?

When requiring the modules, I think the system should look for node_modules first, then jscvendor/node_modules next.  Unless this is already happening thanks to some native functionality of node?

The docs/tutorial/faq, etc, the title line-height is too short, so when the text wraps, the lines look too close.  Fix this.

Re-generate the dist/ files.  Remember to rename the zip file to 0.9.5.

Put this somewhere (knowledge base?)
# Execute this in the server:
ln -s /etc/letsencrypt/live/jscsite.net/fullchain.pem jscause-cert.pem
ln -s /etc/letsencrypt/live/jscsite.net/privkey.pem jscause-key.pem


Before announcing:
 - Finish the website.
  - It needs a Contribute section. - Maybe?
  - Also, JSCause.org is giving me an HTTPS warning.  Why?  Check with github.
    - It happens when I use www in the name.  If I don't, it won't happen. Common?

AT THIS POINT, RE-RELEASE THE ALPHA.

Convert everything below this point into github issues (but document them elsewhere as local text files.  Don't rely on github too much.)
 - Then, fill out ROADMAP.md with the issues/feature requests.

Hmmm. require('path').join(), when creating relative paths, they start from where jscause is run when using fs. operations (as opposed to rt. operations.)  Warn this to the user.
  - There should be a function that sets up the correct path to inside the site.  It should be part of the public list of available rt. functions (I think we use one internally for rt. file operations.)
  - Shortcut for require('path').join()?

We don't have a JSCause way to create new files.  Perhaps NodeJS's fs module will suffice, but consider it for a next version. rt.writeFile()? And rt.appendFile()?

Watch for and reload changes at this point (hot reloading.)
 - And only the site it's affected, leaving the rest intact. - If possible.
 - And if there is a compile-time error, don't bring the whole application down.  This may be tricky.

Did we document JSCause's behavior when .rtOnSuccess or .rtOnError have an empty parameter? Not even an empty callback, but an empty parameter.  If not, then document.

Should we give users the ability to output to the logs? I don't think console.error() can do that from a JSCP file.

If the user moves/copies/deletes a file inside of ./website, it should make it immediately available.

A way to include partials during complilation time.
<jsinclude "some/relative/path.jscp|path.html" />
 - Careful with circular references!

A start.jscp file? JSCause runs it at startup.  Outside of website/.
 - An end.jscp file? To clean up.  Outside of website/.
   - And test.

Semi-critical:  Do callbacks without rt.waitFor() create memory leaks? Will those callback live forever? What about the rt.waitFor() callbacks?
 - If they do live forever, how to discard them?!

Why aren't error 404/500 showing the default browser error when no error4xx/error5xx files are available? For instance, shouldn't Firefox show a dinosaur?  It shows a blank page instead, or it just stays in the previous page.  And Chrome doesn't even report a status error on the network tab entry (but does report it when we click the actual entry and examine its contents.)

How can JSCause share the same code (e.g. function definitions) between server and client?
A tag that indicates "The rest of the line is Javascript"?

Why do errors thrown by rt.moveFile() (and I'm assuming other similar ones) report a line (unknown) instead of the actual line number?

Better error message when the page is suspected to be HTML only (remember that we need to add <html />).

<js=/js> quirk: (known issue)
<js='1');rt.print(/js> will work.
 - Should we eliminate this quirk?  Or should we document it?

validateLoggingConfigSection():  It should try to include the site name in the instances that apply.  This will require to update the corresponding tests too.

Tests validating that, just like <html/>,  <html /> (with a space) also works.

A jscp file with just this:
}/js>
Will yield a misleading error.  Fix it.

This comment:
// Good for debugging.
Should that break condition be there, uncommented?

symlinkList.push():  Shouldn't there be a limit check of some sort here?

The HTTPS configuration seems to be incomplete. We'll need to add an optional ca option to httpsOptions in jscause.js:
        const httpsOptions =
        {
          key: sslKey,
          cert: sslCert,
          ca: caCert // chain.pem.  But probably with a .crt extension
        };
Or possibly:
          ca: [
                    fs.readFileSync('path/to/CA_root.crt'), // CA root certificate file
                    fs.readFileSync('path/to/ca_bundle_certificate.crt') // CA bundle file
              ]

There must be a way to detect them when the server starts and emit a warning if the example certs are attempted to be used (by comparing them with a hash?) And only if https is attempted to be used.

If the perSite log option says "enabled", and the site doesn't provide a log directory, will the application throw an error when starting, as it should?

Perhaps we don't need to programmatically deal with symbolic links.  Should we leave this to the OS (and thus remove the code that checks and deals with symlinks)?
 - But what about circular references?

In respect to JSCause correctly failing when, say, it tries to open a jscause.conf symlink that points to nothing (broken symlink), there should be a way for it to warn the user that "the file is not found because the symlink points to nowhere," instead of just saying "file not found."

Whoa, does setInterval() works okay with rt.waitFor()?  I know setTimeout() does, but I'm not sure if setInterval() does the right thing.

What happens in this case?  Like, what does JSCause do? Throw an error? Or just hang?  Warn? (And document.)
// This is incorrect:
rt.readFile('my_source.txt', 'utf-8')
  .rtOnSuccess(rt.waitFor(() => { rt.print('File read successfully!'); }))

And what's the deal with this comment in the code?:
// req.setTimeout() might be more suitable here.  Test extensively.

_Manually test_ (for real) the rest (uploads, serving error files, etc.)
 - Maybe you can document your steps (in notes_testing.txt), for reference when implementing more tests in the future.
   - And then check that entries are already documented elsewhere in the document, and delete duplicates.

 - Handling PUT/DELETE requests (which I think aren't supported - yet [ever?])
   - They must return error 405.
 - Callbacks and rt.waitFor(), rt.Then(), rt.Catch() (or whatever their right syntax are.)
   - Nesting.
 - rt.* methods.
 - Other file names.
   - Other extensions.
   - No extensions.
   - Configuration: No using of extensions.
   - Default index.jscp
 - Static files.
 - Static files requested with POST.
 - Headers.

Take care of this:
DeprecationWarning: Buffer() is deprecated due to security and usability issues. Please use the Buffer.alloc(), Buffer.allocUnsafe(), or Buffer.from() methods instead
 - This may show in the Formidable source code.  Can you, um, "update"?
   - If it still happens.  Node 12+.

At this point, back up and....
PUBLISH ANOTHER ALPHA!

===

readFile() passes the encoding parameter raw to fs.readFile. This parameter could either be a string or an object.  Perhaps JSCause should be more restrictive on what should be specified here?
 - If you do this, update the docs.

Perhaps log's directoryName should be directoryPath since it's not just the name, but the full/relative path.

Hm, if I do <p><js rt.print('a'); /js>bc</p>, shouldn't I get 'abc' instead of 'a bc'?

Wait, why does serving "index.html" in / throw a 404 error if we go to "http://whatever.com/"?
 - Because index.html is not considered an index file.  index.jscp is. Put this in the future dev doc.

Should take a look at formidable's limit options and see if you can leverage them (or not.)  For example: maxFileSize.  https://github.com/node-formidable/node-formidable

Should I use res.setEncoding('utf8'); anywhere?

Strange that "Uploading is forbidden" is shown even with form POST methods without a file type.  Is this correct?  If it is, fine.  If it isn't, at least put in bugs list.

And make sure that error 500s are logged (either to console of to file) if the corresponding logging configuration value is set.
 - Not happening already?

Can POST/PUT/DELETE requests refer to error4xx and error5xx files? What to do in these cases?
  - Allow it?!?!

Sample site:
   - And no nginx, no apache.
   - All ports closed except for ssh (random one?), 80 and 443.
   - Install node.
   - Install jscause, make it work (it should run.)
   - See if you can access it from outside via HTTP.

- At this point, undo any jscsite work on rpp*****a.
   - And configure https.

In the specs:
- jscause.conf:  Global enclosing curly brackets are optional.
  - Does this still count?  Check the testing.

Did you know that site names can be anything? Like "{}" will be converted to "[Object object]".
 - If we decide to leave this, document.
   - If we decide to correct it, update the tests to check that this behavior doesn't happen.

Don't forget that we have this logOptions param in checkExpectedLogMessages().

Perform exhaustive testing at this point.
 - Document every step you do in notes_testing.txt
   - You must test comments, // and /* */ in json files.
     - Wait, are /* */ supported at all?

Can guest jscp scripts create globals that can then be read by jscause internal functions? I hope not.  This would be a security risk.

Do we need onServerStarted, onServerError, onTerminateComplete?

Maybe: In some automated tests in which the server shut downs normally (ctrl+C?), they should wait for the server to shut down completely (e.g. allow time to close all the log files.)

 - Back up, please.

Strange: two slashes in a path will render jscause.conf invalid:
"rootDirectoryName": "//mysite",
Why? Parser bug?

- Document:
 - Very long GET params haven't been tested with JSCause.  Be judicious when using --max-http-header-size
   - For dev docs:  If this will ever be supported, remember to write tests for it.

There should be one JSCLogMessageQueue and one isJSCLogMessageQueueProcessing per site and for the global server.

- Logging rotation?
  - Keep the last N files? (0 for keep everything).
    - And document!
    - Do the configuration first.  Follow the logFileSizeThreshold route.
      - Actually, see if you can convert parameters to context object in certain situations first.
        - Example: handleError4xx(()
          - Yeah, why don't you pass identifiedSite directly to those?
  - When you do this, remove this from the documentation: "A file rotation feature, in which only the most recent N files are kept, will be added in a future version."
    - And, well, document.

- Output to log file in bulk (every 500ms or so) and async (throttle/debounce).
    - That check about whether we're on the right file to log? Do it _before_ debouncing.
      - Same with archiving checks.
    - Document this behavior.

Do we need this?
else if (process.argv[2] === 'testmode')
 - If we do, DOCUMENT.

If I put on site.json:
"fileOutput": "disbled",
(notice that there is a typo),
the server will emit an error, but will allow the listening to continue.
  - The server shouldn't allow the listening, correct?
  - Still happening?

On getDirectoryPathAndCheckIfWritable():
 - Why do directory paths need to be writable? Maybe the log directories, but nothing else...

- Test thoroughly.
  - Simulate and test all the errors.
    - Including the console.warn()
    - Tests should only run in dev mode.

- Documentation:  nodejs jscause.js runtests
  - If the tests are not present, do not even try to run them.

Server logging?
 - Access and errors.
   - Must be a configuration.
     - No configuration? No logging.  But a WARNING must be issued.
 - Make sure that ERROR and INFO, which are normally displayed in color in a terminal, don't have weird characters surrounding them in a log text file.
  - Isn't this implemented already?

Get rid of __RP.

Can two no-name sites exist?  In theory they share the same name, and the server should not start, just like it does with two sites with identical names.

At this point, back up.

Put regex literals outside of functions (like in handleCustomError).

We'll need to put more code into functions.
 - Run the tests after this.

And back up again.

Ability to write to files?
  - Text and binary.
  - Put pending testing work in notes_testing.txt

You need to break down incomingRequestHandler.
 - And validateLoggingConfigSection.
 - And definitely startApplication.

Deal with this (it happened on linode; I'm guessing I can get it locally if I upgrade node):
(node:9833) [DEP0005] DeprecationWarning: Buffer() is deprecated due to security and usability issues. Please use the Buffer.alloc(), Buffer.allocUnsafe(), or Buffer.from() methods instead.

Ability to provide an alias for a server, so the same content can served from two host names.  For example, from example.com and www.example.com:
On the site.json file:
"hostName": "jscsite.net,www.jscsite.net"

Back up.

Databases.
 - Basic.
   - We'll use MariaDB.
     - https://www.npmjs.com/package/mariadb
       - Just 4 dependencies.

Update notes_testing.txt with any testing that needs to be implemented.

Put in docs that a favicon.ico should be provided in the website root.
 - Put your own favicon.ico meanwhile.
   - Or at least test that it works as intended.

Exposure of res and req, for advanced users.
 - But only if a config value allows it.

Hard-coded values should go in a global file.

Are we vulnerable to this?
https://hackerone.com/reports/310439

At this point, divide up the engine into different files.
 - Make it one file using gulp or something, for prod.
   - Or just use your own setup file.
  - Check that everything passes testing.

Formalize the documentation.
 - Including some JSCause dev documentation (how to contribute, how to add new dependencies to JSCVendor, etc.)

Publish 0.7.0a version here.
 - Indicate what dependencies you're using (per MIT's license?).
   - jscvendor folder.

Syntax highlighters for Atom, VS Code, Vim, Sublime, Notepad++, TextWrangler.
 - Perhaps for future version.
   - Or outsource?

Make two versions:  Standalone and NPM-installable.

Does this work on Windows?

Version 0.7.1b here!
 - Upload to https://github.com/eighthjouster/jscause

 - Create a couple of sites with it.
 - Announce.

Time to convert those tests in notes_testing.txt to actual tests.
The last test should call doEmptyTestDirectory()
So far:
 - Check for pending work in notes_testing.txt

==========================

Order by priority:

- Will JSCause run files that end in .JSCM/.JSCP (all upper-case) in a case-insensitive filysystem? (It shouldn't.)
      - Update the docs with whatever you find.

There must by a way to chroot a process, so it doesn't escape the directory it's running on.
 - Preferably with node.
   - But necessary.  Publishing an article should work too.

Sometimes, this test fails:
 - Check that site file creation occurs in the file system when gz and log above threshold exists
Please fix.

Are all caught errors cleaning up properly after themselves? Open connections, file descriptors, and the like...

Use Cluster.  When a process dies because of an unhandled exception, spawn another one.
  - How to exit this application, though? Same old with Ctrl+C?

Add tests: Test that two consecutive <js=whatever/js> render fine, no errors, etc.

Add tests for rt.printJSON()

- From the documentation:
"If you move compressed log files to another location, and JSCause is writing to a suffixed file (e.g., `jsc_2020-02-08_22-00-00--2.log`), then it will reset writing to a non-suffixed file.  This will cause log entries that will appear as out of sync with the files they're in.  And because of the file name reset, backing it up could lead to the newer file overwriting the older one.  To avoid this, your move procedure should not move any the compressed suffixed files associated with the current (non-compressed) log file.  For example, given the following list of files: `jsc_2019-12-31_23-00-00.log.gz`, `jsc_2020-01-01_00-00-00.log.gz` and `jsc_2020-01-01_00-00-00--1.log`, just move `jsc_2020-12-31_23-00-00.log.gz`.  This will be fixed in a future version."
So.... fix it.

If an absolute path is provided to rt.module(), an error is logged.  However, it should also throw an error 500.
 - And add corresponding test.

Implement deleting directories!
 - And check that the current functions can copy/move directories.
   - And document.

Will rt.header() modify the "X-Powered-By" header?  It shouldn't, should it?
Also, assignAppHeaders() doesn't seem to validate that the value is a string.  Should it?

"For security purposes, JSCause will only run JSCP files only if they are inside a site's `website` directory."
 - Does this apply to JSCM files? Can JSCM invocations have absolute paths? Relative paths referring to symlinks outside of the website directory? Enforce/clarify in docs.

The future: JSCF files (fragments), rt.includeFragment('some_file.jscf'), or similar, which would be inserted in the calling file as if it was part of it.  This would be a precompiling process.
  - Careful with circular references.  JSCause should ignore those, unless it's a direct circular reference, and warn about it?

Do jscp programs have access to the requester's user agent? User-Agent header entry?

If a request is interrupted half-way through, will the connection persist? Will the server continue listening?  It shouldn't.  And perhaps this is mitigated by an already implemented timeout, but... it shouldn't.
  - Look into Formidable events.  Or request's events.

Why didn't req.setTimeout() work for me when I was implementing requestTimeoutSecs?
  - I had to devise a custom solution involving requestTickTockId.
  - If you fix this, include a similar feature for responses, a la responseTimeoutSecs.

Optional, configurable limit number of number of uploaded files and fields.  Right now, there is no limit; or maybe there is one imposed by Formidable?
 - Create the corresponding tests, combining:
   - File and fields.
   - Files (more than one) and fields.
In the same vein: Optional, configurable limit number of uploaded files.  Right now, there is no limit; or maybe there is one imposed by Formidable?
 - And create the corresponsing tests.
   - Check that the temp files are erased.
     - The one provided by the application.
     - And the one provided by formidable, if applies.

Address:
// TO-DO: We need try/catch here. If error, include ${key} on the reporting.

You should make sure that error4XX and 5XX files are cached (if they're within the threshold).  That is, they should be considered first.
 - And test for this.

Easily send e-mail.

If there is a log file open/write/append failure, keep the message and wait a few milliseconds before retrying.
 - With tests.
 - And if you implement this, make sure that the checks to prevent that JSCLogMessageQueue grows indefinitely are in place and working correctly in this scenario.

When the logging system is looking for the next file to log to ("--1.log", "--2.log", etc), even if it finds one with content size below the threshold, it should make sure that no file exists with the next "--N.log" name before writing.  Otherwise, it must keep searching on.  For instance:  if it finds that "--5.log" is below the threshold, but there exists "--6.log", it must continue with "--6.log".  If that file is below the threshold, and "--7.log" does not exist, then it's okay to use for logging.

Testing battery:
 - What if either the cert of key file can be base64 decoded, but the info inside is bad?
   - Will the server fail?  It should.  Test this, if you can.  But don't sweat too much about it.

During compression, the final file should not be .gz but something like .gz.tmp, then renamed to .gz when the compression is done.

Server side HTTP transfer compression?

Do we ever use allOpenLogFiles[filePath].errorStatus?  At least mention it somewhere in a "dev doc"?

As it is now, if writing a log message to file fails, the file will be closed, the attempt will be dropped (so the message is lost), and for next time, another openSync() attempt is made.  This means that performance can degrade if constant logging failures happen.  How to address this?  And how to let the user/sysadmin know?

async/await approach instead of callbacks? Co-routine approach?

More filesystem functions? We have readFile, deleteFile, possibly writeFile... but no more granular options, like opening/closing files and writing to them whenever the developer wants.

rt.exit()? No waiting for setTimeouts and the like?
 - Documentation:  If any callback-based operation scheduled, they will still happen but the JSCause won't wait for them. - Dangerous!
   - Doable?  Consider it.  Future version.
   - If you do this, maybe mention it in the redirection documentation (redirect then exit()).

We use jscmFilesList to check that modules compile.  Perhaps we can still use this during runtime as well?  Maybe the 'require' function prototype can be modified so it used the compiled code if available ("compiledCode.call({}, runTime)" just like it's used in responder(), try/catch and all.)
 - Isn't this happening already?

Shouldn't we check if a randomly generated upload file name exists previously before using?

- Optional routing configuration? (configuration/routes.js)

- A configuration flag to indicate whether a file or directory with a name starting with a dot ('.') should be served or not.  Right now, such files are not being served.

- The same file (e.g. through symbolic links) may be compiled/stored as static more than once.  How to optimize this?

- Global settings (per-site defaults.)  Also, indicate if sites can override them in their own files.
  - And if they can't, and they attempt it, warn.

- Resuming interrupted large downloads.

- Server throttling of large static files?

File encoding detection (for now, every file is assumed UTF-8.)
 - Take into account how both the file system and the browser treat special characters.

The values of the constants:
 - MAX_FILES_OR_DIRS_IN_DIRECTORY
 - MAX_DIRECTORIES_TO_PROCESS
 - MAX_PROCESSED_DIRECTORIES_THRESHOLD
 - MAX_CACHED_FILES_PER_SITE
 - MAX_CACHEABLE_FILE_SIZE_BYTES
should be configurable via a config file.

When defining a function and calling it inside a script, 'this' will refer to that of the node environment.  How to avoid this?  Or is this a "feature"? It should be an empty object.

- We have to start writing tests.
  - Define what needs to be tested.
  - Then outsource?

- Create/rename/delete directories?

- Easy way to write binary blobs and text.
  - Follow what rt.readFile() does.

- rt.readFile() alternative that returns a promise?  rt.readFilePromise()?

Decorator for rt.runAfter(() => {});
 - Something like:
    - <js-after begin /> does: <js rt.runAfter(() => { /js>
    - <js-after end /> does: <js }); /js>
      - Or simply <js-after></js-after>
    - Both blocks must be _outside_ of <js /js> blocks.

- Retriggable waitFor(), so stuff like on('data') can work. - Otherwise, the app will ignore later calls since the callback was dropped off the queue.
- Cancellable waitFor(), so stuff like retriggable waitFor(), or callbacks that may or may not execute can be cancelled from, say, an on('end') or on('error').
  - Perhaps there could be options, like: waitFor(cb1, { name: 'callback 1', retriggable: true }) and waitFor(cb2, { cancels: 'callback 1' }).

Any way to clean up the upload directory (the one specified in site.json) in case of a server error?
 - Maybe at startup?

 Any way to set fs permissions, so individual website processes can only read/write to their user directories only?

Databases, advanced features.

Uploading files:  When an upload form is submitted with no files specified, the framework still processes such files.  That is, a temp file is created, with size 0, I'm guessing.  And no filenames.
  - Any way to avoid the creation of an unnecessary file?

Plugins.  Something as easy as dropping as a folder in a /plugins folder.

A way to do the "server pre-render" stuff. Server-side rendering?
  - For just-HTML-rendering: A way to render in-line before delivering HTML?
    - If you consider the plugin model, this is where you lay the groundwork.
  - For combined API calls: Deliver the state as a one-time payload?
  - As a module/plugin?

JSCause modules.  They are regular npm modules, but certified with no external dependencies.

Better handling of max file size exceeded and uploads forbidden.

If the max file size is reached, the partial uploaded file remains in the system's temp directory.  Deal with this (I tried, I really tried, but just gave up after some time.)

Access to full url.

Set response status code?

Delete header entries?

Clear all header entries?

Perhaps in a not so distant future we can arrange the code so that jscCallback, jscThen and jscCatch are true NOOPs in production.

rt.waitFor():
 - There should be a way to define timeouts, to indicate when the callbacks are taking too long.
   - There should be a default somewhere, maybe 0 for "always wait."
   - If it times out, either throw an error, or run a user's function.

Cleaner way to process.exit()? (or avoid using it altogether.)

Option to crash the server on fatal error?
 - Crash it on immediate compile error.
 - Reload otherwise?

ESLint.

Typescript support?

Deno support?

Compile everything? (not just wait for a runtime error to find out that a module has syntax errors.)
 - Don't waste too much time on this.  You can defer it to a future version.

jscp/jscm syntax coloring? linting?

Remove //__RP comments.

====

Implement:
 - redirections
 - modules/plugins
   - redistributable packages
 - HTTP authentication?
 - How to avoid that the server dies on errors?
   - Or at least it should restart itself.
      - Avoid endless loops?
   - Isn't this already implemented?

Create a test to ensure all the opening/closing/<html/> tag rules according to the specs.

Security.
 - How to avoid, or at least warn or give control to the site, of DDOS by uploading large files or having too many requests?
 - SSL cypher downgrade attacks?

Better rtFileExists() implementation? I dunno, using rtOnError() to signify that the file doesn't exists seems... wrong?

===

Use cases:
 - Regular forms (no uploads).
 - Form uploads.
 - JSON.
   - And security, esp. file size.
 - Databases.
 - Cookies.
 - Redirects.
 - Multi-sites.
 - Server-side rendering (if not too complex.)
 - Other?

===

"(note: this feature is yet to be implemented)" in the manual:  Revise this when you add filesystem watching.

===

Need to create/renew a new dev SSL certificate?
$ openssl req -newkey rsa:2048 -new -nodes -keyout jscause-key.pem -out jscause-csr.pem
$ openssl x509 -req -days 3650 -in jscause-csr.pem -signkey jscause-key.pem -out jscause-cert.pem
Just include jscause-cert.pem and jscause-key.pem in the repo.