List of sanity checks:
======================

Interesting:  If I do this:
getCurrentLogFileName(undefined, 0)
instead of:
getCurrentLogFileName(this.getTestFilePath(['logs']), 0)
Testing won't continue.  It will simply just stop.
  - What can we do to avoid this?  I mean, it should fail at this point, and move on.

Perhaps getCurrentLogFileName should be tested before being used in the way it's used in tests now.

15.  Test that an actual file is DEFINITELY NOT created when console logging:  general, site.

16.  Test that info in an actual file is APPENDED when file logging:  general, site.

17.  Delete the log file and attempt to file log.  It should issue a warning.

18.  Lock the log file (644)  and attempt to file log.  It should issue a warning.

Comment out all the only: true; check that all tests pass.
 - But also check the actual test output, so that it's true that no console/file output means no console/file output


At this point, back up.

===

What happens if opening the log file fails?
  - Or if the writing fails?
    - If you can't write tests for this, at least simulate it just to make sure that the log queue doesn't grow indiscriminately because the writing process got stalled.
      - If it grows, here's a chance to put a failsafe of the sort:
         - "Queue more than 10000 lines long? Don't add more lines and emit a console warning."

Test: What if a port is taken? (By some other application.)

Go through the code and see what else needs to be tested that is not directly related to serving files.
 - Reading user files.
   - Static/dynamic.
     - May need jscCallback/jscThen/jscCatch
 - Caching user files.
   - Static/dynamic.
     - May need jscCallback/jscThen/jscCatch

Then, go through the code and start testing content-related stuff:
  - Whether HTML stuff renders.
  - Forms / GET / POST.
     - Use big files just to make sure that processes don't go past the next test.
     - May need jscCallback/jscThen/jscCatch
  - JSON stuff.
  - File uploads.
    - Temporary upload files should be deleted.
     - May need jscCallback/jscThen/jscCatch
     - Use big files just to make sure that processes don't go past the next test.
  - Limits exceeded.  Timeouts.
     - May need jscCallback/jscThen/jscCatch
  - Callbacks.
     - May need jscCallback/jscThen/jscCatch
  - waitFor().
     - May need jscCallback/jscThen/jscCatch
  - rtThen() / rtCatch().
     - May need jscCallback/jscThen/jscCatch
  - Other rt's.
  - File operations.
     - May need jscCallback/jscThen/jscCatch
  - Redirects.
  - Cookies.
  - Error 400 / Error 500.
    - Static error 400, static error 500.
    - Other errors.
  - Logging.
     - Especially the file name auto-generation.
     - May need jscCallback/jscThen/jscCatch
  - At this point, resume engine development.
  - Publish an alpha.

Check all the output when running all the tests, in case there are inconsistencies (e.g., test says no console output, but console output ocurred.  Things like that.)

In the end, jscause_backup.conf can be either restored or deleted.


Do we ever use doRemoveDirectoryFromPathList()?
 - If not, consider removing it.  Or document its existence somehow.  I dunno...

- Leave this file to document future development that needs corresponding testings created.
