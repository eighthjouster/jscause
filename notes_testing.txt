List of sanity checks:
======================

Perhaps getCurrentLogFileName should be tested before being used in the way it's used in tests now.

Test getCurrentLogFileName():
Test that everything in its comment is right:
// Provide an initial suffix of 0 and a postExtension of '.gz'.
// That signals the function that we're looking for names that have already been
// used (files are compressed with this name).
// If the name exists, recursively call this file with a different suffix (e.g. 1).
// Once a name has not been used in a compressed file, recursively call this function again,
// this time with no postExtension.
// That signals the functin that we're looking for names for files that either:
// 1. are not being used, or 2. are being used and under a certain file size threshold.
//
// Example:  Look for a name such as 'jsc_name'.
// 1. Does jsc_name.log.gz exists? Look for jsc_name--1.log.gz, then jsc_name--2.log.gz, etc.
// 2. Found that jsc_name--3.log.gz does not exist? Ok.
// 3. Check if jsc_name--3.log exists.  It does not?  Cool.  Let's use this name for logging.  The end.
// 4. It exists?  Check if its size is no larger than the threshold.
// 5. Otherwise, check for jsc_name--4.log, jsc_name--5.log, etc, going back to step 3.

* - Invalid logDir parameter? - Done.
* - What about simulating that the dir is unreadable? - Done.

NEXT UP:
- Then dir with a '.gz' log extension.
 - Then dir with a file with the same file name and '.gz' extension and '-1' or whatever that allows us to check that it doesn't return that one.
allows us to check that it doesn't return that one.
 - Then dir with files with both extensions.
 - Invalid threshold parameter?
 - Then dir with files that are under the size threshold.
 - Then dir with files that are over the size threshold.
 - Then dir with different extensions?
 - Can we simulate "running out of names"?

At this point, back up.

15.  Test that an actual file is DEFINITELY NOT created when console logging:  general, site.

16.  Test that info in an actual file is APPENDED when file logging:  general, site.

17.  Delete the log file and attempt to file log.  It should issue a warning.

18.  Lock the log file (644)  and attempt to file log.  It should issue a warning.

At this point, back up.

19.  Test log archiving.
  - It will be various tests: if files exist, thresholds, etc.

Comment out all the only: true; check that all tests pass.
 - But also check the actual test output, so that it's true that no console/file output means no console/file output

===

What happens if opening the log file fails?
  - Or if the writing fails?
    - If you can't write tests for this, at least simulate it just to make sure that the log queue doesn't grow indiscriminately because the writing process got stalled.
      - If it grows, here's a chance to put a failsafe of the sort:
         - "Queue more than 10000 lines long? Don't add more lines and emit a console warning."

At this point, back up.

Test: What if a port is taken? (By some other application.)

Go through the code and see what else needs to be tested that is not directly related to serving files.
 - Reading user files.
   - Static/dynamic.
     - May need jscCallback/jscThen/jscCatch
 - Caching user files.
   - Static/dynamic.
     - May need jscCallback/jscThen/jscCatch

Then, go through the code and start testing content-related stuff:
  - Whether HTML stuff renders.
  - Forms / GET / POST.
     - Use big files just to make sure that processes don't go past the next test.
     - May need jscCallback/jscThen/jscCatch
  - JSON stuff.
  - File uploads.
    - Temporary upload files should be deleted.
     - May need jscCallback/jscThen/jscCatch
     - Use big files just to make sure that processes don't go past the next test.
  - Limits exceeded.  Timeouts.
     - May need jscCallback/jscThen/jscCatch
  - Callbacks.
     - May need jscCallback/jscThen/jscCatch
  - waitFor().
     - May need jscCallback/jscThen/jscCatch
  - rtThen() / rtCatch().
     - May need jscCallback/jscThen/jscCatch
  - Other rt's.
  - File operations.
     - May need jscCallback/jscThen/jscCatch
  - Redirects.
  - Cookies.
  - Error 400 / Error 500.
    - Static error 400, static error 500.
    - Other errors.
  - Logging.
     - Especially the file name auto-generation.
     - May need jscCallback/jscThen/jscCatch
  - At this point, resume engine development.
  - Publish an alpha.

Check all the output when running all the tests, in case there are inconsistencies (e.g., test says no console output, but console output ocurred.  Things like that.)

In the end, jscause_backup.conf can be either restored or deleted.


Do we ever use doRemoveDirectoryFromPathList()?
 - If not, consider removing it.  Or document its existence somehow.  I dunno...

- Leave this file to document future development that needs corresponding testings created.
