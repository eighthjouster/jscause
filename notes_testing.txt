There is a testing framework in place, but we'll need to fill it out with actual tests.
See: runTesting() and the jsTest/ folder.

They are intended for unit testing.

I was considering using NightWatchJS (or similar) for end-to-end testing.

For now, I'll try to compile a list of all the sanity checks that need to be done in order to ensure that the framework is behaving correctly.  When implementing new functionality or features, please add their corresponding sanity checks here.

Notice that certain expect output conditions (if not most) omit unnecessary lines.  A tester must ignore those.  For example:  If the server outputs the following:

ERROR: Site configuration:  The following configuration attributes were not found:
ERROR: - logging
ERROR: - canupload
ERROR: - maxpayloadsizebytes
ERROR: - mimetypes
ERROR: - tempworkdirectory
ERROR: - jscpextensionrequired
ERROR: - httppoweredbyheader
ERROR: Site 'My Site' not started.
INFO: ************ All sites' configuration read at this point ********************
ERROR: Server not started.  No sites are running.

But the expected output is defined as:
ERROR: Site configuration:  The following configuration attributes were not found:
ERROR: Site 'My Site' not started.
ERROR: Server not started.  No sites are running.

Then the test passes.


List of sanity checks:
======================

Starting a server is done with `node jscause.js`

1. Create an empty folder with jscause.js in it.

2. Start the server:  Expect at least one response of the type:
ERROR: CRITICAL: Cannot load jscvendor/vendor_template.jsctpl file. The JSCause installation might be corrupted.
  nodejs must quit.

3. Add the jscvendor folder.

4. Start the server: Expect two responses:
ERROR: Cannot find jscause.conf file.
ERROR: Server not started.  No sites are running.
  nodejs must quit.

5. Add an empty jscause.conf file.

6. Start the server:  Expect the response:
ERROR: Server not started.  No sites are running.
  nodejs must quit.

7. jscause.conf with empty or invalid formats, part 1. With the content, start the server.  Nodejs must quit:
- Content:
{}
- Expect:
ERROR: Server configuration:  The following configuration attribute was not found:
ERROR: - sites
ERROR: Server not started.  No sites are running.
- Content:
[a single space, no new line]
ERROR: Invalid jscause.conf file format.
ERROR: Unexpected end of JSON input
- Content:
[an empty new line]
- Expect:
ERROR: Invalid jscause.conf file format.
ERROR: Unexpected end of JSON input
INFO: ************ All sites' configuration read at this point ********************
ERROR: Server not started.  No sites are running.
- Content:
p
- Expect:
ERROR: Invalid jscause.conf file format.
ERROR: Unexpected token p in JSON at position 0
ERROR: Server not started.  No sites are running.
- Content:
{
- Expect:
ERROR: Invalid jscause.conf file format.
ERROR: Unexpected end of JSON input
ERROR: Server not started.  No sites are running.
- Content:
[1]
- Expect:
ERROR: "0" is not a valid configuration key.
INFO: ************ All sites' configuration read at this point ********************
ERROR: Server not started.  No sites are running.
- Content:
{
  unknown: ""
}
- Expect:
ERROR: Invalid jscause.conf file format.
ERROR: Unexpected token u in JSON at position 2
ERROR: Server not started.  No sites are running.
- Content:
{
  "unknown": unknown
}
- Expect:
ERROR: Invalid jscause.conf file format.
ERROR: Unexpected token u in JSON at position 2
ERROR: Server not started.  No sites are running.
- Content:
{
  "unknown": ""
}
- Expect:
ERROR: "unknown" is not a valid configuration key.
ERROR: Check that all the keys and values in jscause.conf are valid.
ERROR: Server not started.  No sites are running.
- Content:
{
  "sites": ""
}
- Expect:
ERROR: Server configuration:  Expected an array of sites.
ERROR: Server not started.  No sites are running.
- Content:
{
  "sites": []
}
- Expect:
ERROR: Configuration:  sites cannot be empty.
ERROR: Server not started.  No sites are running.
- Content:
{
  "sites": [1]
}
- Expect:
ERROR: Server configuration: Logging: directoryName: Cannot find directory: [*]
ERROR: Server not started.  No sites are running.
- Expect:
ERROR: Configuration:  sites cannot be empty.
ERROR: Server not started.  No sites are running.
- Content:
{
  "sites": [1],
  "unknown": 1
}
- Expect:
ERROR: "unknown" is not a valid configuration key.
ERROR: Check that all the keys and values in jscause.conf are valid.
ERROR: Server not started.  No sites are running.
- Content:
{
  "sites": [1]p
}
- Expect:
ERROR: Invalid jscause.conf file format.
ERROR: Unexpected token p in JSON at position 14
ERROR: Server not started.  No sites are running.
- Content:
{
  "sites": [1],
}
- Expect:
ERROR: Invalid jscause.conf file format.
ERROR: Unexpected token } in JSON at position 16
ERROR: Server not started.  No sites are running.
- Content:
{
  "sites": [1],
  "unknown": 1
}
- Expect:
ERROR: "unknown" is not a valid configuration key.
ERROR: Check that all the keys and values in jscause.conf are valid.
ERROR: Server not started.  No sites are running.
- Content:
{
  "sites": [1],
  "logging": 1
}
- Expect:
ERROR: Server configuration:  Expected a valid logging configuration value.
ERROR: Server not started.  No sites are running.
- Content:
{
  "sites": [1],
  "logging": {}
}
- Expect:
ERROR: Server configuration: Logging: directoryName: Cannot find directory: [*]
ERROR: Server not started.  No sites are running.

8. Add an empty './logs' directory.

9. jscause.conf with empty or invalid formats, part 2. With the content, start the server.  Nodejs must quit:
- Content:
{
  "sites": [1],
  "logging": {}
}
- Expect:
ERROR: Site configuration: Missing name.
ERROR: Site (no name) not started.
ERROR: Server not started.  No sites are running.
- Content:
{
  "sites": [
    {
    },
  ],
  "logging": {}
}
- Expect:
ERROR: Invalid jscause.conf file format.
ERROR: Unexpected token ] in JSON at position 18
ERROR: Server not started.  No sites are running.
- Content:
{
  "sites": [
    {
    }
  ],
  "logging": {}
}
- Expect:
ERROR: Site configuration: Missing name.
ERROR: Site (no name) not started.
ERROR: Server not started.  No sites are running.
- Content:
{
  "sites": [
    {
      "name": ""
    }
  ],
  "logging": {}
}
- Expect:
ERROR: Site configuration: Missing name.
ERROR: Site (no name) not started.
ERROR: Server not started.  No sites are running.
- Content:
{
  "sites": [
    {
      "name": "My Site"
    }
  ],
  "logging": {}
}
- Expect:
ERROR: Site configuration: Site name 'My Site' is missing port.
ERROR: Site 'My Site' not started.
ERROR: Server not started.  No sites are running.
- Content:
{
  "sites": [
    {
      "name": "My Site",
      "port": ""
    }
  ],
  "logging": {}
}
- Expect:
ERROR: Site configuration:  Site name 'My Site' has an invalid port.  Integer number expected.
ERROR: Site 'My Site' not started.
ERROR: Server not started.  No sites are running.
- Content:
{
  "sites": [
    {
      "name": "My Site",
      "port": 3000
    }
  ],
  "logging": {}
}
- Expect:
ERROR: Site configuration: Site name 'My Site' is missing rootdirectoryname.
ERROR: Site 'My Site' not started.
ERROR: Server not started.  No sites are running.
- Content:
{
  "sites": [
    {
      "name": "My Site",
      "port": 3000,
      "rootDirectoryName": ""
    }
  ],
  "logging": {}
}
- Expect:
ERROR: Site configuration: Site name 'My Site': rootdirectoryname cannot be empty.
ERROR: Site 'My Site' not started.
ERROR: Server not started.  No sites are running.
- Content:
{
  "sites": [
    {
      "name": "My Site",
      "port": 3000,
      "rootDirectoryName": 4
    }
  ],
  "logging": {}
}
- Expect:
ERROR: Site configuration: Site name 'My Site': rootdirectoryname expects a string value.
ERROR: Site 'My Site' not started.
ERROR: Server not started.  No sites are running.
- Content:
{
  "sites": [
    {
      "name": "My Site",
      "port": 3000,
      "rootDirectoryName": "mysite"
    }
  ],
  "logging": {}
}
- Expect:
ERROR:  Cannot find directory: sites/mysite
ERROR: Site 'My Site' not started.
ERROR: Server not started.  No sites are running.

10. Add an empty './sites/mysite' directory.

11. jscause.conf with empty or invalid formats, part 3. With the content, start the server.  Nodejs must quit:
- Content:
{
  "sites": [
    {
      "name": "My Site",
      "port": 3000,
      "rootDirectoryName": "mysite"
    }
  ],
  "logging": {}
}
- Expect:
ERROR: Cannot find configuration/site.json file.
ERROR: Site 'My Site' not started.
ERROR: Server not started.  No sites are running.

12. Add an empty './sites/mysite/configuration/site.json' file.

13. jscause.conf with empty or invalid formats, part 4. With the content, start the server.  Nodejs must quit:
- Content:
{
  "sites": [
    {
      "name": "My Site",
      "port": 3000,
      "rootDirectoryName": "mysite"
    }
  ],
  "logging": {}
}
- Expect:
ERROR: Site configuration: Site 'My Site': site.json is invalid.
ERROR: Site 'My Site' not started.
ERROR: Server not started.  No sites are running.

15. mysite/configuration/site.json with empty or invalid formats, part 1. With the content, start the server.  Nodejs must quit:
- Content:
{}
- Expect:
ERROR: Site configuration:  The following configuration attributes were not found:
ERROR: - logging
ERROR: - hostname
ERROR: - canupload
ERROR: - maxpayloadsizebytes
ERROR: - mimetypes
ERROR: - tempworkdirectory
ERROR: - jscpextensionrequired
ERROR: - httppoweredbyheader
ERROR: Site 'My Site' not started.
ERROR: Server not started.  No sites are running.
- Content:
{
  "hostName": 1
}
- Expect:
ERROR: Site configuration:  Invalid hostname.  String value expected.
ERROR: Site 'My Site' not started.
ERROR: Server not started.  No sites are running.
- Content:
{
  "hostName": ""
}
- Expect:
ERROR: Site configuration:  hostname cannot be empty.
ERROR: Site configuration:  The following configuration attributes were not found:
ERROR: - logging
ERROR: - canupload
ERROR: - maxpayloadsizebytes
ERROR: - mimetypes
ERROR: - tempworkdirectory
ERROR: - jscpextensionrequired
ERROR: - httppoweredbyheader
ERROR: Site 'My Site' not started.
ERROR: Server not started.  No sites are running.
- Content:
{
  "hostName": "jscausesite1"
}
- Expect:
ERROR: Site configuration:  The following configuration attributes were not found:
ERROR: Site 'My Site' not started.
ERROR: Server not started.  No sites are running.
- Content:
{
  "hostName": "jscausesite1",
  "canUpload": ""
}
- Expect:
ERROR: Site configuration:  Invalid canupload.  Boolean expected.
ERROR: Site 'My Site' not started.
ERROR: Server not started.  No sites are running.
- Content:
{
  "hostName": "jscausesite1",
  "canUpload": false,
  "maxPayloadSizeBytes": ""
}
- Expect:
ERROR: Site configuration:  Invalid maxpayloadsizebytes.  Integer number expected.
ERROR: Site 'My Site' not started.
ERROR: Server not started.  No sites are running.
- Content:
{
  "hostName": "jscausesite1",
  "canUpload": false,
  "maxPayloadSizeBytes": 0,
  "jscpExtensionRequired": 1
}
- Expect:
ERROR: Site configuration:  Invalid jscpextensionrequired.  String value expected.
ERROR: Site 'My Site' not started.
ERROR: Server not started.  No sites are running.
- Content:
{
  "hostName": "jscausesite1",
  "canUpload": false,
  "maxPayloadSizeBytes": 0,
  "jscpExtensionRequired": ""
}
- Expect:
ERROR: Site configuration:  jscpextensionrequired cannot be empty.  Use 'never' (recommended), 'optional' or 'always'.
ERROR: Site 'My Site' not started.
ERROR: Server not started.  No sites are running.
- Content:
{
  "hostName": "jscausesite1",
  "canUpload": false,
  "maxPayloadSizeBytes": 0,
  "jscpExtensionRequired": "random"
}
- Expect:
ERROR: Site configuration:  invalid jscpextensionrequired value.  Use 'never' (recommended), 'optional' or 'always'.
ERROR: Site 'My Site' not started.
ERROR: Server not started.  No sites are running.
- Content:
{
  "hostName": "jscausesite1",
  "canUpload": false,
  "maxPayloadSizeBytes": 0,
  "jscpExtensionRequired": "optional",
  "httpPoweredByHeader": 1
}
- Expect:
ERROR: Site configuration:  Invalid httppoweredbyheader.  String value expected.
ERROR: Site 'My Site' not started.
ERROR: Server not started.  No sites are running.
- Content:
{
  "hostName": "jscausesite1",
  "canUpload": false,
  "maxPayloadSizeBytes": 0,
  "jscpExtensionRequired": "optional",
  "httpPoweredByHeader": ""
}
- Expect:
ERROR: Site configuration:  httppoweredbyheader cannot be empty.  Use 'include' or 'exclude'.
ERROR: Site 'My Site' not started.
ERROR: Server not started.  No sites are running.
- Content:
{
  "hostName": "jscausesite1",
  "canUpload": false,
  "maxPayloadSizeBytes": 0,
  "jscpExtensionRequired": "optional",
  "httpPoweredByHeader": "random"
}
- Expect:
ERROR: Site configuration:  invalid httppoweredbyheader value.  Use 'include' or 'exclude'.
ERROR: Site 'My Site' not started.
ERROR: Server not started.  No sites are running.
- Content:
{
  "hostName": "jscausesite1",
  "canUpload": false,
  "maxPayloadSizeBytes": 0,
  "jscpExtensionRequired": "optional",
  "httpPoweredByHeader": "include",
  "httpsCertFile": 1
}
- Expect:
ERROR: Site configuration:  Invalid httpscertfile.  String value expected.
ERROR: Site 'My Site' not started.
ERROR: Server not started.  No sites are running.
- Content:
{
  "hostName": "jscausesite1",
  "canUpload": false,
  "maxPayloadSizeBytes": 0,
  "jscpExtensionRequired": "optional",
  "httpPoweredByHeader": "include",
  "httpsCertFile": ""
}
- Expect:
ERROR: Site configuration:  httpscertfile cannot be empty.
ERROR: Site 'My Site' not started.
ERROR: Server not started.  No sites are running.
- Content:
{
  "hostName": "jscausesite1",
  "canUpload": false,
  "maxPayloadSizeBytes": 0,
  "jscpExtensionRequired": "optional",
  "httpPoweredByHeader": "include",
  "httpsCertFile": "jscause-cert.pem",
  "httpsKeyFile": 1
}
- Expect:
ERROR: Site configuration:  Invalid httpskeyfile.  String value expected.
ERROR: Site 'My Site' not started.
ERROR: Server not started.  No sites are running.
- Content:
{
  "hostName": "jscausesite1",
  "canUpload": false,
  "maxPayloadSizeBytes": 0,
  "jscpExtensionRequired": "optional",
  "httpPoweredByHeader": "include",
  "httpsCertFile": "jscause-cert.pem",
  "httpsKeyFile": ""
}
- Expect:
ERROR: Site configuration:  httpskeyfile cannot be empty.
ERROR: Site 'My Site' not started.
ERROR: Server not started.  No sites are running.
- Content:
{
  "hostName": "jscausesite1",
  "canUpload": false,
  "maxPayloadSizeBytes": 0,
  "jscpExtensionRequired": "optional",
  "httpPoweredByHeader": "include",
  "httpsCertFile": "jscause-cert.pem",
  "httpsKeyFile": "jscause-key.pem",
  "tempWorkDirectory": 1
}
- Expect:
ERROR: Site configuration:  Invalid tempworkdirectory.  String value expected.
ERROR: Site 'My Site' not started.
ERROR: Server not started.  No sites are running.
- Content:
{
  "hostName": "jscausesite1",
  "canUpload": false,
  "maxPayloadSizeBytes": 0,
  "jscpExtensionRequired": "optional",
  "httpPoweredByHeader": "include",
  "httpsCertFile": "jscause-cert.pem",
  "httpsKeyFile": "jscause-key.pem",
  "tempWorkDirectory": ""
}
- Expect:
ERROR: Site configuration:  tempworkdirectory cannot be empty.
ERROR: Site 'My Site' not started.
ERROR: Server not started.  No sites are running.
- Content:
{
  "hostName": "jscausesite1",
  "canUpload": false,
  "maxPayloadSizeBytes": 0,
  "jscpExtensionRequired": "optional",
  "httpPoweredByHeader": "include",
  "httpsCertFile": "jscause-cert.pem",
  "httpsKeyFile": "jscause-key.pem",
  "tempWorkDirectory": "./workbench",
  "mimeTypes": 1
}
- Expect:
ERROR: Site configuration:  Invalid mimetypes.  Object expected.
ERROR: Site 'My Site' not started.
ERROR: Server not started.  No sites are running.
- Content:
{
  "hostName": "jscausesite1",
  "canUpload": false,
  "maxPayloadSizeBytes": 0,
  "jscpExtensionRequired": "optional",
  "httpPoweredByHeader": "include",
  "httpsCertFile": "jscause-cert.pem",
  "httpsKeyFile": "jscause-key.pem",
  "tempWorkDirectory": "./workbench",
  "mimeTypes": {}
}
- Expect:
ERROR: Site configuration:  The following configuration attribute was not found:
ERROR: - logging
ERROR: Site 'My Site' not started.
ERROR: Server not started.  No sites are running.
- Content:
{
  "hostName": "jscausesite1",
  "canUpload": false,
  "maxPayloadSizeBytes": 0,
  "jscpExtensionRequired": "optional",
  "httpPoweredByHeader": "include",
  "httpsCertFile": "jscause-cert.pem",
  "httpsKeyFile": "jscause-key.pem",
  "tempWorkDirectory": "./workbench",
  "mimeTypes": {},
  "logging": {}
}
- Expect:
ERROR: Site configuration: Site 'My Site' has an invalid logging directoryname.
ERROR: Site 'My Site' not started.
ERROR: Server not started.  No sites are running.
- Content:
{
  "hostName": "jscausesite1",
  "canUpload": false,
  "maxPayloadSizeBytes": 0,
  "jscpExtensionRequired": "optional",
  "httpPoweredByHeader": "include",
  "httpsCertFile": "jscause-cert.pem",
  "httpsKeyFile": "jscause-key.pem",
  "tempWorkDirectory": "./workbench",
  "mimeTypes": {
    "random": {}
  }
}
- Expect:
ERROR: Site configuration:  mimetype has an invalid 'random' name.  Expected: 'include', 'exclude'.
ERROR: Site 'My Site' not started.
ERROR: Server not started.  No sites are running.
- Content:
{
  "hostName": "jscausesite1",
  "canUpload": false,
  "maxPayloadSizeBytes": 0,
  "jscpExtensionRequired": "optional",
  "httpPoweredByHeader": "include",
  "httpsCertFile": "jscause-cert.pem",
  "httpsKeyFile": "jscause-key.pem",
  "tempWorkDirectory": "./workbench",
  "mimeTypes": {
    "include": 1
  }
}
- Expect:
ERROR: Site configuration:  mimetype has an invalid 'include' attribute value. Object (key, value) expected.
ERROR: Site 'My Site' not started.
ERROR: Server not started.  No sites are running.
- Content:
{
  "hostName": "jscausesite1",
  "canUpload": false,
  "maxPayloadSizeBytes": 0,
  "jscpExtensionRequired": "optional",
  "httpPoweredByHeader": "include",
  "httpsCertFile": "jscause-cert.pem",
  "httpsKeyFile": "jscause-key.pem",
  "tempWorkDirectory": "./workbench",
  "mimeTypes": {
    "include": {
      "": ""
    }
  }
}
- Expect:
ERROR: Site configuration:  mimetype name cannot be empty.
ERROR: Site 'My Site' not started.
ERROR: Server not started.  No sites are running.
- Content:
{
  "hostName": "jscausesite1",
  "canUpload": false,
  "maxPayloadSizeBytes": 0,
  "jscpExtensionRequired": "optional",
  "httpPoweredByHeader": "include",
  "httpsCertFile": "jscause-cert.pem",
  "httpsKeyFile": "jscause-key.pem",
  "tempWorkDirectory": "./workbench",
  "mimeTypes": {
    "include": {
      "png": ""
    }
  }
}
- Expect:
WARNING: Site configuration: png mimetype value is empty.  Assumed application/octet-stream.
- Content:
{
  "hostName": "jscausesite1",
  "canUpload": false,
  "maxPayloadSizeBytes": 0,
  "jscpExtensionRequired": "optional",
  "httpPoweredByHeader": "include",
  "httpsCertFile": "jscause-cert.pem",
  "httpsKeyFile": "jscause-key.pem",
  "tempWorkDirectory": "./workbench",
  "mimeTypes": {
    "include": ["png"]
  }
}
- Expect:
ERROR: Site configuration:  mimetype has an invalid 'include' attribute value. Object (key, value) expected.
ERROR: Site 'My Site' not started.
ERROR: Server not started.  No sites are running.
- Content:
{
  "hostName": "jscausesite1",
  "canUpload": false,
  "maxPayloadSizeBytes": 0,
  "jscpExtensionRequired": "optional",
  "httpPoweredByHeader": "include",
  "httpsCertFile": "jscause-cert.pem",
  "httpsKeyFile": "jscause-key.pem",
  "tempWorkDirectory": "./workbench",
  "mimeTypes": {
    "exclude": {}
  }
}
- Expect:
ERROR: Site configuration:  mimetype has an invalid 'exclude' attribute value. Array expected.
ERROR: Site 'My Site' not started.
ERROR: Server not started.  No sites are running.
- Content:
{
  "hostName": "jscausesite1",
  "canUpload": false,
  "maxPayloadSizeBytes": 0,
  "jscpExtensionRequired": "optional",
  "httpPoweredByHeader": "include",
  "httpsCertFile": "jscause-cert.pem",
  "httpsKeyFile": "jscause-key.pem",
  "tempWorkDirectory": "./workbench",
  "mimeTypes": {
    "exclude": [""]
  }
}
- Expect:
ERROR: Site configuration:  mimetype name cannot be empty.
ERROR: Site 'My Site' not started.
ERROR: Server not started.  No sites are running.
- Content:
{
  "hostName": "jscausesite1",
  "canUpload": false,
  "maxPayloadSizeBytes": 0,
  "jscpExtensionRequired": "optional",
  "httpPoweredByHeader": "include",
  "httpsCertFile": "jscause-cert.pem",
  "httpsKeyFile": "jscause-key.pem",
  "tempWorkDirectory": "./workbench",
  "mimeTypes": {},
  "logging": {
    "random": "random"
  }
}
- Expect:
ERROR: Site configuration: Logging: 'random' is not a valid configuration key.
ERROR: Site 'My Site' not started.
ERROR: Server not started.  No sites are running.
- Content:
{
  "hostName": "jscausesite1",
  "canUpload": false,
  "maxPayloadSizeBytes": 0,
  "jscpExtensionRequired": "optional",
  "httpPoweredByHeader": "include",
  "tempWorkDirectory": "./workbench",
  "mimeTypes": {},
  "logging": {
    "fileOutput": 1
  }
}
- Expect:
ERROR: Site configuration: Logging: fileoutput must be either 'enabled' or 'disabled'.
ERROR: Site 'My Site' not started.
ERROR: Server not started.  No sites are running.
- Content:
{
  "hostName": "jscausesite1",
  "canUpload": false,
  "maxPayloadSizeBytes": 0,
  "jscpExtensionRequired": "optional",
  "httpPoweredByHeader": "include",
  "tempWorkDirectory": "./workbench",
  "mimeTypes": {},
  "logging": {
    "fileOutput": "disabled",
    "consoleOutput": 1
  }
}
- Expect:
ERROR: Site configuration: Logging: consoleOutput must be either 'enabled' or 'disabled'.
ERROR: Site 'My Site' not started.
ERROR: Server not started.  No sites are running.
- Content:
{
  "hostName": "jscausesite1",
  "canUpload": false,
  "maxPayloadSizeBytes": 0,
  "jscpExtensionRequired": "optional",
  "httpPoweredByHeader": "include",
  "tempWorkDirectory": "./workbench",
  "mimeTypes": {},
  "logging": {
    "directoryName": 1
  }
}
- Expect:
ERROR: Site configuration: 'My Site' site logging: invalid directoryname.  String expected.
ERROR: Site 'My Site' not started.
ERROR: Server not started.  No sites are running.
- Content:
{
  "hostName": "jscausesite1",
  "canUpload": false,
  "maxPayloadSizeBytes": 0,
  "jscpExtensionRequired": "optional",
  "httpPoweredByHeader": "include",
  "httpsCertFile": "jscause-cert.pem",
  "httpsKeyFile": "jscause-key.pem",
  "tempWorkDirectory": "./workbench",
  "mimeTypes": {},
  "logging": {
    "directoryName": ""
  }
}
- Expect:
ERROR: Site configuration: Site 'My Site': logging directoryname cannot be empty.
ERROR: Site 'My Site' not started.
ERROR: Server not started.  No sites are running.
- Content:
{
  "hostName": "jscausesite1",
  "canUpload": false,
  "maxPayloadSizeBytes": 0,
  "jscpExtensionRequired": "optional",
  "httpPoweredByHeader": "include",
  "httpsCertFile": "jscause-cert.pem",
  "httpsKeyFile": "jscause-key.pem",
  "tempWorkDirectory": "./workbench",
  "mimeTypes": {},
  "logging": {
    "directoryName": "random"
  }
}
- Expect:
ERROR: Site configuration: Logging: directoryName: Cannot find directory: [*]
ERROR: Site 'My Site' not started.
ERROR: Server not started.  No sites are running.

14. Add an empty './sites/mysite/localLogs' directory.

15. mysite/configuration/site.json with empty or invalid formats, part 2. With the content, start the server.  Nodejs must quit:
- Content:
{
  "logging": {
    "directoryName": "/localLogs"
  }
}
- Expect:
ERROR: Site configuration: 'My Site' site logging: directoryname must be a relative path.
ERROR: Site 'My Site' not started.
ERROR: Server not started.  No sites are running.
- Content:
{
  "logging": {
    "directoryName": "./randomDirectory"
  }
}
- Expect:
ERROR: Site configuration: Logging: directoryName: Cannot find directory: [*]
ERROR: Site 'My Site' not started.
ERROR: Server not started.  No sites are running.
- Content:
{
  "hostName": "jscausesite1",
  "canUpload": false,
  "maxPayloadSizeBytes": 0,
  "jscpExtensionRequired": "optional",
  "httpPoweredByHeader": "include",
  "httpsCertFile": "jscause-cert.pem",
  "httpsKeyFile": "jscause-key.pem",
  "tempWorkDirectory": "./workbench",
  "mimeTypes": {},
  "logging": {
    "fileOutput": "enabled",
    "directoryName": "./localLogs",
    "consoleOutput": "enabled"
  }
}
- Expect:
ERROR: Site 'My Site': could not read directory: sites/mysite/website
ERROR: Site 'My Site' not started.
ERROR: Server not started.  No sites are running.
- Content:
{
  "hostName": "jscausesite1",
  "canUpload": false,
  "maxPayloadSizeBytes": 0,
  "jscpExtensionRequired": "optional",
  "httpPoweredByHeader": "include",
  "httpsCertFile": "jscause-cert.pem",
  "httpsKeyFile": "jscause-key.pem",
  "tempWorkDirectory": "./workbench",
  "mimeTypes": {},
  "logging": {
    "fileOutput": "enabled",
    "directoryName": "./localLogs",
    "consoleOutput": "enabled",
    "logFileSizeThreshold": 0
  }
}
- Expect:
ERROR: Site configuration: 'My Site' site logging: 'perSite' section must not have a 'logFileSizeThreshold' configuration key.
ERROR: Site 'My Site' not started.
ERROR: Server not started.  No sites are running.

16. Add an empty './sites/mysite/website' directory.

17. mysite/configuration/site.json with empty or invalid formats, part 3. With the content, start the server.  Nodejs must NOT quit:

- Content:
{
  "hostName": "jscausesite1",
  "canUpload": false,
  "maxPayloadSizeBytes": 0,
  "jscpExtensionRequired": "optional",
  "httpPoweredByHeader": "include",
  "httpsCertFile": "jscause-cert.pem",
  "httpsKeyFile": "jscause-key.pem",
  "tempWorkDirectory": "./workbench",
  "mimeTypes": {},
  "logging": {
    "fileOutput": "enabled",
    "directoryName": "./localLogs",
    "consoleOutput": "enabled"
  }
}
- Expect:
INFO: Reading configuration for site 'My Site' from 'sites/mysite'
INFO: Site 'My Site' at http://jscausesite1:3000/ assigned to server 0
INFO: The following sites were set up successfully:
INFO: 'My Site'
INFO: Will start listening.
INFO: Server 0 listening on port 3000

18. jscause.conf with empty or invalid formats, part 5. With the content, start the server.  Nodejs must quit:
- Content:
{
  "sites": [
    {
      "name": "My Site",
      "port": 3000,
      "rootDirectoryName": "mysite",
      "enableHTTPS": 0
    }
  ],
  "logging": {}
}
- Expect:
ERROR: Site configuration: Site name 'My Site' has an invalid 'enablehttps' value.  Boolean expected.
ERROR: Site 'My Site' not started.
ERROR: Server not started.  No sites are running.
- Content:
{
  "sites": [
    {
      "name": "My Site",
      "port": 3000,
      "rootDirectoryName": "mysite"
    }
  ],
  "logging": {
    "general": ""
  }
}
- Expect:
ERROR: Configuration: logging:  Invalid value for general.  Object expected
ERROR: Server not started.  No sites are running.
- Content:
{
  "sites": [
    {
      "name": "My Site",
      "port": 3000,
      "rootDirectoryName": "mysite",
      "enableHTTPS": false
    }
  ],
  "logging": {
    "general": {
      "fileOutput": "enabled",
      "directoryName": "logs",
      "consoleOutput": "enabled",
      "logFileSizeThreshold": ""
    }
  }
}
- Expect:
ERROR: Site configuration: Logging: 'logFileSizeThreshold' is invalid.  Integer number expected.
ERROR: Server not started.  No sites are running.
- Content:
{
  "sites": [
    {
      "name": "My Site",
      "port": 3000,
      "rootDirectoryName": "mysite",
      "enableHTTPS": false
    }
  ],
  "logging": {
    "general": {
      "fileOutput": "enabled",
      "directoryName": "logs",
      "consoleOutput": "enabled",
      "logFileSizeThreshold": -1
    }
  }
}
- Expect:
ERROR: Site configuration: Logging: 'logFileSizeThreshold' must be 0 or greater.
ERROR: Server not started.  No sites are running.
- Content:
- Expect:
- Content:
- Expect:
- Content:
- Expect:
- Content:
- Expect:
- Content:
- Expect:
- Content:
- Expect:
- Content:
- Expect:
- Content:
- Expect:
- Content:
- Expect:



===

Pending:
mysite's localLogs was tested with absolute paths (which should prevent the server from starting.)  What other directories should be tested.
mysite config:  what if localLogs is not writeable? Or what if it's a symlink?
Test: When a mandatory value is missing from site.json (one by one.)
 - Especially the logging section.
 - So, remember that some keys are not mandatory (like the https cert ones.)
Test the multi-site combinations (when the server stops because two sites share the same name, etc.)
Test the configuration validity of tempWorkDirectory, if you haven't done so yet.
Test: What if a port is taken? (By some other application.)
Test: Check if a rootDirectoryName value is invalid.
 - As in, it must be a string, not a number.
    - What about other sibling values? "name", for example, can be an integer.  It should complain instead.
Test that https cert/key files are valid.
