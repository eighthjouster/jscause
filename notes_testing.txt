Pending:
========

Manual testing of user-related files:
 - I'm documenting so we can one day automate it:
   *1. One single site, one single, empty index.jscp file.
     Expected: Output: Blank page.  0 bytes.
   *2. index.jscp just with one line:
     console.log(1);
     Expected: Server console prints 1 with each request.
   *3. index.jscp with just one line:
     rt.print(1);
     Expected: Page showing '1'.
   *4. index.jscp with just one line:
     p
     Expected: Error 500.

Pending manual testing:
 - Uploads:
  - Two sites, two separate temp upload directories, right?
 - POST requests.
 - Handling PUT/DELETE requests (which I think aren't supported.)
 - Stalling the page with a setTimeout.
 - Callbacks and rt.waitFor(), rt.Then(), rt.Catch() (or whatever their right syntax are.)



At this point, _manually test_ the rest (uploads, serving error files, etc.)
 - Maybe you can document your steps, for reference when implementing more tests in the future.
   - And then check that entries are already documented elsewhere in the document, and delete duplicates.

At this point, back up and....
PUBLISH AN ALPHA!

- At this point, resume engine development.
  - Publish another alpha.

In the end, jscause_backup.conf can be either restored or deleted.

Do we ever use doRemoveDirectoryFromPathList()?
 - If not, consider removing it.  Or document its existence somehow.  I dunno...

- Leave this file to document future development that needs corresponding testings created.

In fact:

TO-DO:
======

(Order by priority)

To test:
 - Each section, see where they're being used, and test that part first.
 - To test: (But more in the context of e2e - like, "upload file, then what happens?")
   - startApplication()
      - The user-related parts.
   - startServer()
      - If there are user-related parts.
   - runWebServer()
      - If there are user-related parts.
   - createRunTime():
     - All the methods it defines.
   - processSourceFile().
     - compileSource() and surroundings.
     - What happens when there's a compile-time error?
       - How does the server respond to a request involving a file with a compile-time error?
   - analyzeFileStats()
   - processStaticFile()
   - incomingRequestHandler()
   - rtContext? The user-serving parts.
     - Practically almost all of them.  Check a base declaration with all the possible attributes in responder().
   - assignAppHeaders
   - finishUpHeaders, as part of the header delivery testing.
   - sendPayLoadExceeded()
   - sendUploadIsForbidden()
   - makeRTPromise()
   - And makeRTPromiseHandler(), another possibly complicated one.
     - makeCustomRtPromiseActor()?
   - And createWaitForCallback(), another possibly complicated one.
   - Test cancelDefaultRTPromises() and when it should be called.
   - Run time exceptions.
   - makeRTOnSuccessOnErrorHandlers() - See where this is used, and test that one first.
   - extractErrorFromRuntimeObject()?
   - handleCustomError()
     - And callers, and callers of those callers.
   - serveStaticContent()
     - responderStatic()
   - sanitizeForHTMLOutput and surroundings (callers).
     - symbolsToSanitize()
   - print / print queue
   - runAfter / nesting (if allowed? Depending on the documentation.  If not allowed, test that it is indeed being not allowed.)
   - responder() and callers.
   - responderStaticFileError()
   - resEnd()
      - Logging of requests, request results (400/500), etc.
   - doneWith() - this will be interesting because it's used in different scenarios.
     - doneWithPromiseCounterActor()?
   - doDeleteFile, part of deleteUnhandledFiles, which is called after upload request completed.  So, test this when testing uploads.
     - setTempWorkDirectory
   - Make sure that the config files are being honored.
     - For instance, if set httppoweredbyheader to false, will it really be hidden from the headers?
     - If we hide the jscp extension, will retrieving a file including that extension throw a 404 error?
   - Check that, if HTTPS is enabled, requests are served through HTTPS.
   - Check that we can use JSCM modules no problem.
     - Check that the app fails as soon as it's found that modules won't compile (if we don't do this already.)
   - Check that we can't access files configured for another website, even if we use the same port (if this is possible at all.)
   - Check that we cannot break away from the site directory (no accessing the rest of the file system via a request.)
   - Check that we cannot browser directories.
   - Check that we can't access files that start with '.' (hidden files.)
     - Or directories.
   - Check that if a site fails being set up, it's really not-accessible from the internet.  We wouldn't want to give access to a site with undefined state.
   - Did we really test actual file log compression? Like, verifying that a file is compressed correctly...

More testing, go through the code and start testing content-related stuff.  Check what we haven't tested yet:
  - Whether HTML stuff renders.
  - Forms / GET / POST.
     - Use big files just to make sure that processes don't go past the next test.
     - May need jscCallback/jscThen/jscCatch
  - JSON stuff.
  - File uploads.
    - Temporary upload files should be deleted.
     - May need jscCallback/jscThen/jscCatch
     - Use big files just to make sure that processes don't go past the next test.
  - Limits exceeded.  Timeouts.
     - May need jscCallback/jscThen/jscCatch
  - Callbacks.
     - May need jscCallback/jscThen/jscCatch
  - waitFor().
     - May need jscCallback/jscThen/jscCatch
  - rtThen() / rtCatch().
     - May need jscCallback/jscThen/jscCatch
  - Other rt's.
  - File operations.
     - May need jscCallback/jscThen/jscCatch
  - Redirects.
  - Cookies.
  - Error 400 / Error 500.
    - Static error 400, static error 500.
    - Other errors.
 - Test loadVendorModules()
 - exitApplication()
    - waitForLogFileCompressionBeforeTerminate?
    - Is closeLogFile() being called at the very end?
    - In what circumstances is it called?
       - Are the objects it refers to cleaned up like it says in there?
       Example: delete allOpenLogFiles[filePath];

Test that html 4xx/5xx error files prevail over jscp 4xx/5xx error files.

- Implementing (and checking) callTestPhaseIfAvailable() on the rest of the phase functions:
  - These implementations cannot be modeled after the ones that are already implemented (i.e., onTestBeforeStart, onBeforeTestEnd, onTestEnd, onUnitTestStarted).  Read on.
  - onExpectedLogMessagesPass - This one is very tricky.  It can happen while another function phase is waiting, messing up the current phase state after completing.
  - onServerStarted - same deal as with onExpectedLogMessagesPass?
  - onServerError - same deal as with onExpectedLogMessagesPass?

More testing:
  +- Logging.
      +- Delete the log file and attempt to file log.  It should issue a warning.
        - Do this just with the server logging part.
        - Hasn't this been implemented already?
        - Do this by putting a website with a setTimeout that logs before and after the timeout.
          - The first log is fine, the second log should happen when the file has been deleted (maybe half way through the timeout wait.)

      - Lock the log file (444 or whatever) and attempt to file log.  It should issue a warning.
        - Hasn't this been implemented already?
        - Do this just with the server logging part.
          - The first log is fine, the second log should happen when the file has been deleted (maybe half way through the timeout wait.)

- Logging (if too much, move to the future):
  - What happens if opening the log file fails?
    - Or if the writing fails?
    - In essence, test: openAndWriteToLogFile() and writeLogToFile()

- Test the log queue failsafe code.  What happens when MAX_FILELOG_QUEUE_ENTRIES is reached?  Is it being handled as expected?

Test that users get the following message when the log queue is, for some reason, full:
 - "WARNING! Log message queue full.  No entries are being logged to file.  Check permissions, storage space and/or filesystem health."
   - This can be a unit test.

 - Security-related testing:  poke for vulnerabilities; test that the app is secure.
