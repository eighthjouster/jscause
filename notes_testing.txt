List of sanity checks:
======================

Paste this in a browser's console for a thrifty/nifty new line encoding/decoding tool:
document.body.innerHTML='<textarea onkeyup="document.body.children[1].innerHTML=event.target.value.replace(/\\n/g,\'\\\\n\')"></textarea><textarea onkeyup="document.body.children[2].innerHTML=event.target.value.replace(/\\\\n/g,\'\\n\')"></textarea><textarea></textarea>';

====

Found a bug:
Run all tests:
Check the test:
Console: General disabled, general per site disabled, site enabled; no console output
It reports:
WARNING:  Unable to open log file for creating or appending: /Users/rafael/Projects/web/jsframework/jsctest/testrootdir/sites/mysite2/localLogs2/jsc_2019-04-29_8-00-00-30.log
 - First of all, the test should have caught that some output was emitted and failed.
   - So, fix this first.
     - It happens when ALL tests are active.
 - Second of all, why is the application trying to log to a file, when it shouldn't?
   - First of all, fix whatever is causing that the warning happens because of some test remnant.
   - Second of all, ^ temporarily unfix the above, then fix the cause of the warning.  No file logging should be happening here.
     - Don't forget to "re-fix" the test remnant unfix above.

Test the following:
Console:
*1.
 - Server general logging: disabled.
 - Server per site logging: disabled.
 - Site logging: disabled.
   - Result:  no console output.

*2.
 - Server general logging: disabled.
 - Server per site logging: disabled.
 - Site logging: enabled.
   - Result:  no console output.

*3.
 - Server general logging: disabled.
 - Server per site logging: per site.
 - Site logging: disabled.
   - Result:  no console output.

*4.
 - Server general logging: disabled.
 - Server per site logging: per site.
 - Site logging: enabled.
   - Result:  console output.

*5.
 - Server general logging: disabled.
 - Server per site logging: enabled.
 - Site logging: disabled.
   - Result:  console output.

*6.
 - Server general logging: disabled.
 - Server per site logging: enabled.
 - Site logging: enabled.
   - Result:  console output.

*7.
 - Server general logging: enabled.
 - Server per site logging: disabled.
 - Site logging: disabled.
   - Result:  console output.

*8.
 - Server general logging: enabled.
 - Server per site logging: disabled.
 - Site logging: enabled.
   - Result:  console output.

*9.
 - Server general logging: enabled.
 - Server per site logging: per site.
 - Site logging: disabled.
   - Result:  console output.

*10.
 - Server general logging: enabled.
 - Server per site logging: per site.
 - Site logging: enabled.
   - Result:  console output.

*11.
 - Server general logging: enabled.
 - Server per site logging: enabled.
 - Site logging: disabled.
   - Result:  console output.

+12.
 *- Server general logging: enabled.
 *- Server per site logging: enabled.
 *- Site logging: enabled.
   *- Result:  console output.
   UP NEXT:
   +- Check that there is no file output here for good measure.

File output:
1.
 - Server general logging: disabled.
 - Server per site logging: disabled.
 - Site logging: disabled.
   - Result:  no file output.

2.
 - Server general logging: disabled.
 - Server per site logging: disabled.
 - Site logging: enabled.
   - Result:  no file output.

3.
 - Server general logging: disabled.
 - Server per site logging: per site.
 - Site logging: disabled.
   - Result:  no file output.

4.
 - Server general logging: disabled.
 - Server per site logging: per site.
 - Site logging: enabled.
   - Result:  SITE file output.

5.
 - Server general logging: disabled.
 - Server per site logging: enabled.
 - Site logging: disabled.
   - Result:  SITE file output.

6.
 - Server general logging: disabled.
 - Server per site logging: enabled.
 - Site logging: enabled.
   - Result:  SITE file output.

7.
 - Server general logging: enabled.
 - Server per site logging: disabled.
 - Site logging: disabled.
   - Result:  SERVER file output.

8.
 - Server general logging: enabled.
 - Server per site logging: disabled.
 - Site logging: enabled.
   - Result:  SERVER file output.

9.
 - Server general logging: enabled.
 - Server per site logging: per site.
 - Site logging: disabled.
   - Result:  SERVER file output.

10.
 - Server general logging: enabled.
 - Server per site logging: per site.
 - Site logging: enabled.
   - Result:  SERVER file output, FILE file output.

11.
 - Server general logging: enabled.
 - Server per site logging: enabled.
 - Site logging: disabled.
   - Result:  SERVER file output, FILE file output.

12.
 - Server general logging: enabled.
 - Server per site logging: enabled.
 - Site logging: enabled.
   - Result:  SERVER file output, FILE file output.
   - Check that there is no console output here for good measure.

13.
Both console and file:
 - Server general logging: enabled.
 - Server per site logging: enabled.
 - Site logging: enabled.
   - Result:  Console output, SERVER file output, FILE file output.

Test that console does not emit anything if disabled?
 - And files too (serverDir, siteDir).
    jscTestGlobal.logOutputToServerDirOccurred
    jscTestGlobal.logOutputToSiteDirOccurred

14.  Test that an actual file is DEFINITELY not created when logging:  general, site.

15.  Test that an actual file is created when logging:  general, site.

16.  Test that info in an actual file is APPENDED when logging:  general, site.

Comment out all the only: true; check that all tests pass.
 - But also check the actual test output, so that it's true that no console/file output means no console/file output


At this point, back up.

===

Test: What if a port is taken? (By some other application.)

Go through the code and see what else needs to be tested that is not directly related to serving files.
 - Reading user files.
   - Static/dynamic.
 - Caching user files.
   - Static/dynamic.

Then, go through the code and start testing content-related stuff:
  - Whether HTML stuff renders.
  - Forms / GET / POST.
  - JSON stuff.
  - File uploads.
    - Temporary upload files should be deleted.
  - Limits exceeded.  Timeouts.
  - Callbacks.
  - waitFor().
  - rtThen() / rtCatch().
  - Other rt's.
  - File operations.
  - Redirects.
  - Cookies.
  - Error 400 / Error 500.
    - Static error 400, static error 500.
    - Other errors.
  - Logging.
  - At this point, resume engine development.

Check all the output when running all the tests, in case there are inconsistencies (e.g., test says no console output, but console output ocurred.  Things like that.)

In the end, jscause_backup.conf can be either restored or deleted.

- Leave this file to document future development that needs corresponding testings created.
